{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5271987,"sourceType":"datasetVersion","datasetId":3067824}],"dockerImageVersionId":30761,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/tamerkanak/company-valuation-sales-forecasting-w-h2o-automl?scriptVersionId=196623853\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport h2o\nfrom h2o.estimators.gbm import H2OGradientBoostingEstimator\nfrom h2o.frame import H2OFrame\nimport matplotlib.pyplot as plt","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-14T12:25:24.461758Z","iopub.execute_input":"2024-09-14T12:25:24.462197Z","iopub.status.idle":"2024-09-14T12:25:25.45432Z","shell.execute_reply.started":"2024-09-14T12:25:24.462153Z","shell.execute_reply":"2024-09-14T12:25:25.452918Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Initialize H2O cluster\nh2o.init()","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:25:25.456337Z","iopub.execute_input":"2024-09-14T12:25:25.45687Z","iopub.status.idle":"2024-09-14T12:25:34.70997Z","shell.execute_reply.started":"2024-09-14T12:25:25.456818Z","shell.execute_reply":"2024-09-14T12:25:34.708717Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Load and prepare the data\ndf = pd.read_csv('/kaggle/input/retail-data-set/file_out2.csv', parse_dates=['Date'])\ndf['TotalSales'] = df['TotalSales'] - df['Discount']\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)\ndaily_sales = df.resample('D')['TotalSales'].sum()\nmonthly_sales = daily_sales.resample('ME').sum().reset_index()","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:25:34.71265Z","iopub.execute_input":"2024-09-14T12:25:34.71352Z","iopub.status.idle":"2024-09-14T12:25:34.884785Z","shell.execute_reply.started":"2024-09-14T12:25:34.71346Z","shell.execute_reply":"2024-09-14T12:25:34.8835Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Feature engineering\nmonthly_sales['Log_TotalSales'] = np.log1p(monthly_sales['TotalSales'])\nmonthly_sales['Diff_TotalSales'] = monthly_sales['Log_TotalSales'].diff()\nmonthly_sales = monthly_sales.dropna()\n\nmonthly_sales['Month'] = monthly_sales['Date'].dt.month\nmonthly_sales['Year'] = monthly_sales['Date'].dt.year\nmonthly_sales['Day_of_Week'] = monthly_sales['Date'].dt.dayofweek\nmonthly_sales['Week_of_Year'] = monthly_sales['Date'].dt.isocalendar().week.astype(int)  # Change dtype to int\nmonthly_sales['Day_of_Year'] = monthly_sales['Date'].dt.dayofyear\nmonthly_sales['Quarter'] = monthly_sales['Date'].dt.quarter","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:25:34.888128Z","iopub.execute_input":"2024-09-14T12:25:34.888792Z","iopub.status.idle":"2024-09-14T12:25:34.911094Z","shell.execute_reply.started":"2024-09-14T12:25:34.888733Z","shell.execute_reply":"2024-09-14T12:25:34.909862Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Features and target variables\nX = monthly_sales[['Month', 'Year', 'Day_of_Week', 'Week_of_Year', 'Day_of_Year', 'Quarter']]\ny = monthly_sales['Diff_TotalSales']","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:25:34.912976Z","iopub.execute_input":"2024-09-14T12:25:34.913439Z","iopub.status.idle":"2024-09-14T12:25:34.920432Z","shell.execute_reply.started":"2024-09-14T12:25:34.913327Z","shell.execute_reply":"2024-09-14T12:25:34.919178Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Split into training and testing sets\ntrain_data = monthly_sales[monthly_sales['Year'] < 2022]\ntest_data = monthly_sales[monthly_sales['Year'] == 2022]","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:25:34.922378Z","iopub.execute_input":"2024-09-14T12:25:34.922806Z","iopub.status.idle":"2024-09-14T12:25:34.933848Z","shell.execute_reply.started":"2024-09-14T12:25:34.922762Z","shell.execute_reply":"2024-09-14T12:25:34.932728Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train = train_data[['Month', 'Year', 'Day_of_Week', 'Week_of_Year', 'Day_of_Year', 'Quarter']]\ny_train = train_data['Diff_TotalSales']\nX_test = test_data[['Month', 'Year', 'Day_of_Week', 'Week_of_Year', 'Day_of_Year', 'Quarter']]\ny_test = test_data['Diff_TotalSales']","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:25:34.935418Z","iopub.execute_input":"2024-09-14T12:25:34.935799Z","iopub.status.idle":"2024-09-14T12:25:34.947478Z","shell.execute_reply.started":"2024-09-14T12:25:34.935759Z","shell.execute_reply":"2024-09-14T12:25:34.946176Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Convert to H2O frames\nh2o_train = H2OFrame(pd.concat([X_train, y_train], axis=1))\nh2o_test = H2OFrame(pd.concat([X_test, y_test], axis=1))","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:25:34.949131Z","iopub.execute_input":"2024-09-14T12:25:34.949559Z","iopub.status.idle":"2024-09-14T12:25:36.105818Z","shell.execute_reply.started":"2024-09-14T12:25:34.949498Z","shell.execute_reply":"2024-09-14T12:25:36.104671Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Define predictors and response\npredictors = ['Month', 'Year', 'Day_of_Week', 'Week_of_Year', 'Day_of_Year', 'Quarter']\nresponse = 'Diff_TotalSales'","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:25:36.107815Z","iopub.execute_input":"2024-09-14T12:25:36.108886Z","iopub.status.idle":"2024-09-14T12:25:36.114779Z","shell.execute_reply.started":"2024-09-14T12:25:36.108816Z","shell.execute_reply":"2024-09-14T12:25:36.113499Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from h2o.grid.grid_search import H2OGridSearch\n\n# Define the hyperparameter grid\nhyper_params = {\n    'ntrees': [10,50, 100, 150,200],\n    'max_depth': [5, 10, 15,20],\n    'min_rows': [1, 5, 10,20],\n    'learn_rate': [0.05,0.01, 0.1, 0.2,0.5]\n}\n\n# Create an H2OGridSearch object\ngrid = H2OGridSearch(\n    model=H2OGradientBoostingEstimator,\n    hyper_params=hyper_params,\n    grid_id='gbm_grid'\n)\n\n# Train the grid search object\ngrid.train(x=predictors, y=response, training_frame=h2o_train)\n\n# Get the grid search results\ngrid_results = grid.get_grid(sort_by='mse', decreasing=False)\nprint(grid_results)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:25:36.122348Z","iopub.execute_input":"2024-09-14T12:25:36.123464Z","iopub.status.idle":"2024-09-14T12:27:11.283895Z","shell.execute_reply.started":"2024-09-14T12:25:36.123404Z","shell.execute_reply":"2024-09-14T12:27:11.282782Z"},"_kg_hide-output":true,"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Initialize and train the H2O Random Forest model\nrf_model = H2OGradientBoostingEstimator(nfolds=5, learn_rate=0.5, max_depth=20, min_rows=1,ntrees=50, seed=0)\nrf_model.train(x=predictors, y=response, training_frame=h2o_train)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:11.28542Z","iopub.execute_input":"2024-09-14T12:27:11.285763Z","iopub.status.idle":"2024-09-14T12:27:12.196483Z","shell.execute_reply.started":"2024-09-14T12:27:11.285724Z","shell.execute_reply":"2024-09-14T12:27:12.195181Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"performance = rf_model.model_performance(test_data=h2o_test)\nprint(performance)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:12.198245Z","iopub.execute_input":"2024-09-14T12:27:12.198716Z","iopub.status.idle":"2024-09-14T12:27:12.243828Z","shell.execute_reply.started":"2024-09-14T12:27:12.198662Z","shell.execute_reply":"2024-09-14T12:27:12.242659Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Make predictions\npredictions = rf_model.predict(h2o_test)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:12.245529Z","iopub.execute_input":"2024-09-14T12:27:12.2463Z","iopub.status.idle":"2024-09-14T12:27:12.270962Z","shell.execute_reply.started":"2024-09-14T12:27:12.24624Z","shell.execute_reply":"2024-09-14T12:27:12.269713Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Convert predictions to pandas DataFrame\npredictions_df = predictions.as_data_frame()","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:12.272298Z","iopub.execute_input":"2024-09-14T12:27:12.272767Z","iopub.status.idle":"2024-09-14T12:27:12.357547Z","shell.execute_reply.started":"2024-09-14T12:27:12.272712Z","shell.execute_reply":"2024-09-14T12:27:12.356348Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Extract the predictions column from the DataFrame\npredictions_column = predictions_df['predict'].values","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:12.359408Z","iopub.execute_input":"2024-09-14T12:27:12.362278Z","iopub.status.idle":"2024-09-14T12:27:12.371643Z","shell.execute_reply.started":"2024-09-14T12:27:12.362211Z","shell.execute_reply":"2024-09-14T12:27:12.370042Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Compute the cumulative sum of the predictions\ny_pred_cumsum = np.cumsum(predictions_column)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:12.376716Z","iopub.execute_input":"2024-09-14T12:27:12.377483Z","iopub.status.idle":"2024-09-14T12:27:12.387639Z","shell.execute_reply.started":"2024-09-14T12:27:12.377426Z","shell.execute_reply":"2024-09-14T12:27:12.385803Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Compute the original scale of predictions\nlog_total_sales_last = monthly_sales['Log_TotalSales'].iloc[-1]\ny_pred_original = np.expm1(y_pred_cumsum + log_total_sales_last - y_pred_cumsum[0])","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:12.393639Z","iopub.execute_input":"2024-09-14T12:27:12.394068Z","iopub.status.idle":"2024-09-14T12:27:12.399864Z","shell.execute_reply.started":"2024-09-14T12:27:12.394022Z","shell.execute_reply":"2024-09-14T12:27:12.398678Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Collecting test data on an annual basis\ntest_data['Predictions'] = y_pred_original\ntest_data_yearly = test_data.groupby('Date').sum().resample('Y').sum()['TotalSales']\npred_yearly = test_data.groupby('Date').sum().resample('Y').sum()['Predictions']","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:12.40156Z","iopub.execute_input":"2024-09-14T12:27:12.405318Z","iopub.status.idle":"2024-09-14T12:27:12.432693Z","shell.execute_reply.started":"2024-09-14T12:27:12.405271Z","shell.execute_reply":"2024-09-14T12:27:12.431518Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error\n\n# Calculating error metrics\nrmse = np.sqrt(mean_squared_error(test_data_yearly, pred_yearly))\nmse = mean_squared_error(test_data_yearly, pred_yearly)\nmape = mean_absolute_percentage_error(test_data_yearly, pred_yearly) * 100\n\nprint(f'H2O Gradient Boosting RMSE: {rmse:.2f}')\nprint(f'H2O Gradient Boosting MSE: {mse:.2f}')\nprint(f'H2O Gradient Boosting MAPE: {mape:.2f}%')","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:12.434218Z","iopub.execute_input":"2024-09-14T12:27:12.434959Z","iopub.status.idle":"2024-09-14T12:27:13.001137Z","shell.execute_reply.started":"2024-09-14T12:27:12.434883Z","shell.execute_reply":"2024-09-14T12:27:12.99983Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Visualizing results\nplt.figure(figsize=(14, 7))\nplt.plot(monthly_sales['Date'], monthly_sales['TotalSales'], label='Actual Sales', marker='o')\nplt.plot(test_data['Date'], test_data['Predictions'], label='Predictions', marker='o', color='red')\nplt.xlabel('Date')\nplt.ylabel('Total Sales')\nplt.title('H2O Gradient Boosting Predictions - Monthly')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:13.002647Z","iopub.execute_input":"2024-09-14T12:27:13.003293Z","iopub.status.idle":"2024-09-14T12:27:13.561012Z","shell.execute_reply.started":"2024-09-14T12:27:13.003249Z","shell.execute_reply":"2024-09-14T12:27:13.559745Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Convert to H2O frames\nh2o_data = H2OFrame(pd.concat([X, y], axis=1))","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:13.562615Z","iopub.execute_input":"2024-09-14T12:27:13.563095Z","iopub.status.idle":"2024-09-14T12:27:13.819576Z","shell.execute_reply.started":"2024-09-14T12:27:13.563029Z","shell.execute_reply":"2024-09-14T12:27:13.818327Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Initialize and train the H2O Random Forest model\nrf_model = H2OGradientBoostingEstimator(nfolds=5, learn_rate=0.5, max_depth=20, min_rows=1,ntrees=50, seed=0)\nrf_model.train(x=predictors, y=response, training_frame=h2o_data)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:13.821258Z","iopub.execute_input":"2024-09-14T12:27:13.82251Z","iopub.status.idle":"2024-09-14T12:27:14.798195Z","shell.execute_reply.started":"2024-09-14T12:27:13.822448Z","shell.execute_reply":"2024-09-14T12:27:14.796966Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Make predictions for the entire dataset\nh2o_data['Predictions'] = rf_model.predict(h2o_data)['predict']\npredictions_df = h2o_data.as_data_frame()","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:14.799731Z","iopub.execute_input":"2024-09-14T12:27:14.800782Z","iopub.status.idle":"2024-09-14T12:27:14.959544Z","shell.execute_reply.started":"2024-09-14T12:27:14.800718Z","shell.execute_reply":"2024-09-14T12:27:14.95837Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Extract the predictions column from the DataFrame\npredictions_column = predictions_df['Predictions'].values","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:14.961301Z","iopub.execute_input":"2024-09-14T12:27:14.962039Z","iopub.status.idle":"2024-09-14T12:27:14.968949Z","shell.execute_reply.started":"2024-09-14T12:27:14.961981Z","shell.execute_reply":"2024-09-14T12:27:14.967491Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Compute the cumulative sum of the predictions\ny_pred_cumsum = np.cumsum(predictions_column)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:14.970814Z","iopub.execute_input":"2024-09-14T12:27:14.972212Z","iopub.status.idle":"2024-09-14T12:27:14.978519Z","shell.execute_reply.started":"2024-09-14T12:27:14.972153Z","shell.execute_reply":"2024-09-14T12:27:14.977039Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Compute the original scale of predictions\nlog_total_sales_last = monthly_sales['Log_TotalSales'].iloc[-1]\ny_pred_original = np.expm1(y_pred_cumsum + log_total_sales_last - y_pred_cumsum[0])","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:14.9829Z","iopub.execute_input":"2024-09-14T12:27:14.983354Z","iopub.status.idle":"2024-09-14T12:27:14.991443Z","shell.execute_reply.started":"2024-09-14T12:27:14.983304Z","shell.execute_reply":"2024-09-14T12:27:14.990088Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Create a future DataFrame for 60 months\nlast_date = monthly_sales['Date'].max()\nfuture_dates = pd.date_range(start=last_date + pd.DateOffset(months=1), periods=60, freq='M')\nfuture_df = pd.DataFrame({\n    'Date': future_dates,\n    'Month': future_dates.month,\n    'Year': future_dates.year,\n    'Day_of_Week': future_dates.dayofweek,\n    'Week_of_Year': future_dates.isocalendar().week,\n    'Day_of_Year': future_dates.day_of_year,\n    'Quarter': future_dates.quarter\n})\n\n# Convert future DataFrame to H2OFrame\nh2o_future = H2OFrame(future_df)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:14.994408Z","iopub.execute_input":"2024-09-14T12:27:14.995376Z","iopub.status.idle":"2024-09-14T12:27:15.270978Z","shell.execute_reply.started":"2024-09-14T12:27:14.995322Z","shell.execute_reply":"2024-09-14T12:27:15.2697Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Predict future values\nfuture_predictions = rf_model.predict(h2o_future)\nfuture_predictions_df = future_predictions.as_data_frame()","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:15.276844Z","iopub.execute_input":"2024-09-14T12:27:15.277291Z","iopub.status.idle":"2024-09-14T12:27:15.516948Z","shell.execute_reply.started":"2024-09-14T12:27:15.277236Z","shell.execute_reply":"2024-09-14T12:27:15.515652Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Extract the predictions column from the DataFrame\nfuture_predictions_column = future_predictions_df['predict'].values","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:15.518653Z","iopub.execute_input":"2024-09-14T12:27:15.519868Z","iopub.status.idle":"2024-09-14T12:27:15.525824Z","shell.execute_reply.started":"2024-09-14T12:27:15.519806Z","shell.execute_reply":"2024-09-14T12:27:15.524173Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Compute the cumulative sum of the future predictions\ny_future_pred_cumsum = np.cumsum(future_predictions_column)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:15.529875Z","iopub.execute_input":"2024-09-14T12:27:15.531308Z","iopub.status.idle":"2024-09-14T12:27:15.537459Z","shell.execute_reply.started":"2024-09-14T12:27:15.531232Z","shell.execute_reply":"2024-09-14T12:27:15.536154Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Compute the original scale of future predictions\nlog_total_sales_last = monthly_sales['Log_TotalSales'].iloc[-1]\ny_future_pred_original = np.expm1(y_future_pred_cumsum + log_total_sales_last - y_future_pred_cumsum[0])","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:15.539148Z","iopub.execute_input":"2024-09-14T12:27:15.540026Z","iopub.status.idle":"2024-09-14T12:27:15.549389Z","shell.execute_reply.started":"2024-09-14T12:27:15.539966Z","shell.execute_reply":"2024-09-14T12:27:15.548007Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Plot the results\nplt.figure(figsize=(14, 7))\nplt.plot(monthly_sales['Date'], monthly_sales['TotalSales'], label='Actual Sales', marker='o')\nplt.plot(future_df['Date'], y_future_pred_original, label='Next 60 Months Predictions', marker='o', color='red')\nplt.xlabel('Date')\nplt.ylabel('Total Sales')\nplt.title('H2O Gradient Boosting Predictions - Monthly')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:15.551037Z","iopub.execute_input":"2024-09-14T12:27:15.55221Z","iopub.status.idle":"2024-09-14T12:27:16.053093Z","shell.execute_reply.started":"2024-09-14T12:27:15.552161Z","shell.execute_reply":"2024-09-14T12:27:16.051589Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"predictions_series = pd.Series(y_future_pred_original, name='TotalSales')\nfuture_df['TotalSales'] = predictions_series.values","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:16.054848Z","iopub.execute_input":"2024-09-14T12:27:16.055392Z","iopub.status.idle":"2024-09-14T12:27:16.06258Z","shell.execute_reply.started":"2024-09-14T12:27:16.055327Z","shell.execute_reply":"2024-09-14T12:27:16.061011Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"combined_df = pd.concat([monthly_sales, future_df])\ncombined_df.set_index('Date', inplace=True)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:16.063952Z","iopub.execute_input":"2024-09-14T12:27:16.064363Z","iopub.status.idle":"2024-09-14T12:27:16.076159Z","shell.execute_reply.started":"2024-09-14T12:27:16.064316Z","shell.execute_reply":"2024-09-14T12:27:16.074865Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"annual_sales = combined_df['TotalSales'].resample('A').sum()","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:16.077812Z","iopub.execute_input":"2024-09-14T12:27:16.078242Z","iopub.status.idle":"2024-09-14T12:27:16.089708Z","shell.execute_reply.started":"2024-09-14T12:27:16.078201Z","shell.execute_reply":"2024-09-14T12:27:16.088584Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"The decision was made to take a certain percentage of the company's sales revenue in order to consider it as cash flow, since a valuation based solely on sales revenue would be meaningless. To determine this percentage, financial statements obtained from the Public Disclosure Platform (KAP) for companies such as Aselsan, Derimod, and Jantsa were analyzed. Similar to the Retail Dataset, sales revenues were used as a basis, and free cash flows for each quarter were calculated by utilizing other financial items. When comparing sales revenues and free cash flows for each year, it was found that for Aselsan, an average of 19% of the year-end sales revenues from 2016-2023 corresponded to year-end free cash flows. This percentage was found to be 12% for Derimod and 15% for Jantsa. For the Retail Dataset, it was deemed appropriate to take the average of these three values, and 15% of the estimated sales revenues was considered as free cash flow. When calculating the company's value, a discount rate of 60% was set, and this rate was kept dynamic.","metadata":{}},{"cell_type":"code","source":"# Range of specified years\nstart_year = 2023\nend_year = 2027\n\n# Filter the data frame by specific years\nfiltered_df = combined_df.loc[combined_df.index.year.isin(range(start_year, end_year + 1))]\n\n# Calculating total annual sales\nannual_sales = filtered_df['TotalSales'].resample('A').sum()\nannual_sales = pd.DataFrame(annual_sales)\nannual_sales['TotalSales'] = annual_sales['TotalSales'] * 0.15\ndiscount_rate = 0.6","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:16.091207Z","iopub.execute_input":"2024-09-14T12:27:16.091588Z","iopub.status.idle":"2024-09-14T12:27:16.106148Z","shell.execute_reply.started":"2024-09-14T12:27:16.091548Z","shell.execute_reply":"2024-09-14T12:27:16.104967Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def calculate_company_value(forecast_values, discount_rate, terminal_growth_rate=0.05):\n    # Summing future cash flows in annual totals\n    future_cash_flows = forecast_values\n    \n    # Calculating discounted cash flows\n    discounted_cash_flows = [cf / (1 + discount_rate)**i for i, cf in enumerate(future_cash_flows, 1)]\n    \n    # Terminal value calculation\n    terminal_value = future_cash_flows[-1] * (1 + terminal_growth_rate) / (discount_rate - terminal_growth_rate)\n    \n    # Reducing the terminal value\n    terminal_value_discounted = terminal_value / (1 + discount_rate)**len(future_cash_flows)\n    \n    # Calculating company value\n    company_value = sum(discounted_cash_flows) + terminal_value_discounted\n        \n    return company_value\n\n# Calculating company value for 5-year forecasts\ncompany_value_5years = calculate_company_value(annual_sales['TotalSales'].values, discount_rate)\n\nprint(f'Value of the Company after 5 Years: {company_value_5years:.2f}')","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:16.107504Z","iopub.execute_input":"2024-09-14T12:27:16.108011Z","iopub.status.idle":"2024-09-14T12:27:16.121205Z","shell.execute_reply.started":"2024-09-14T12:27:16.107948Z","shell.execute_reply":"2024-09-14T12:27:16.120076Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"h2o.shutdown(prompt=False)","metadata":{"execution":{"iopub.status.busy":"2024-09-14T12:27:16.122661Z","iopub.execute_input":"2024-09-14T12:27:16.123095Z","iopub.status.idle":"2024-09-14T12:27:16.15825Z","shell.execute_reply.started":"2024-09-14T12:27:16.123032Z","shell.execute_reply":"2024-09-14T12:27:16.156955Z"},"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"You can access the article I wrote about this project and the relevant issue via the links below. Enjoy reading!\n\n**Issue**: https://ybsansiklopedi.com/cilt-12-sayi-2-haziran-2024/\n\n**Article**: https://ybsansiklopedi.com/wp-content/uploads/2024/08/Company-Valuation.pdf","metadata":{}}]}