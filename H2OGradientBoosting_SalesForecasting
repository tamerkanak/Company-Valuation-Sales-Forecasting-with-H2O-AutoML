{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/tamerkanak/company-valuation-sales-forecasting-w-h2o-automl?scriptVersionId=212254095\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","execution_count":1,"id":"2b99247c","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2024-12-10T07:16:41.365567Z","iopub.status.busy":"2024-12-10T07:16:41.365184Z","iopub.status.idle":"2024-12-10T07:16:42.554274Z","shell.execute_reply":"2024-12-10T07:16:42.553464Z"},"papermill":{"duration":1.200605,"end_time":"2024-12-10T07:16:42.556539","exception":false,"start_time":"2024-12-10T07:16:41.355934","status":"completed"},"tags":[]},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","import h2o\n","from h2o.estimators.gbm import H2OGradientBoostingEstimator\n","from h2o.frame import H2OFrame\n","import matplotlib.pyplot as plt"]},{"cell_type":"code","execution_count":2,"id":"735f5653","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:16:42.572911Z","iopub.status.busy":"2024-12-10T07:16:42.572343Z","iopub.status.idle":"2024-12-10T07:16:50.548283Z","shell.execute_reply":"2024-12-10T07:16:50.547165Z"},"papermill":{"duration":7.988704,"end_time":"2024-12-10T07:16:50.55278","exception":false,"start_time":"2024-12-10T07:16:42.564076","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Checking whether there is an H2O instance running at http://localhost:54321..... not found.\n","Attempting to start a local H2O server...\n","  Java Version: openjdk version \"11.0.24\" 2024-07-16; OpenJDK Runtime Environment (build 11.0.24+8-post-Ubuntu-1ubuntu320.04); OpenJDK 64-Bit Server VM (build 11.0.24+8-post-Ubuntu-1ubuntu320.04, mixed mode, sharing)\n","  Starting server from /opt/conda/lib/python3.10/site-packages/h2o/backend/bin/h2o.jar\n","  Ice root: /tmp/tmpqj5uzgws\n","  JVM stdout: /tmp/tmpqj5uzgws/h2o_unknownUser_started_from_python.out\n","  JVM stderr: /tmp/tmpqj5uzgws/h2o_unknownUser_started_from_python.err\n","  Server is running at http://127.0.0.1:54321\n","Connecting to H2O server at http://127.0.0.1:54321 ... successful.\n","Warning: Your H2O cluster version is (5 months) old.  There may be a newer version available.\n","Please download and install the latest version from: https://h2o-release.s3.amazonaws.com/h2o/latest_stable.html\n"]},{"data":{"text/html":["\n","<style>\n","\n","#h2o-table-1.h2o-container {\n","  overflow-x: auto;\n","}\n","#h2o-table-1 .h2o-table {\n","  /* width: 100%; */\n","  margin-top: 1em;\n","  margin-bottom: 1em;\n","}\n","#h2o-table-1 .h2o-table caption {\n","  white-space: nowrap;\n","  caption-side: top;\n","  text-align: left;\n","  /* margin-left: 1em; */\n","  margin: 0;\n","  font-size: larger;\n","}\n","#h2o-table-1 .h2o-table thead {\n","  white-space: nowrap; \n","  position: sticky;\n","  top: 0;\n","  box-shadow: 0 -1px inset;\n","}\n","#h2o-table-1 .h2o-table tbody {\n","  overflow: auto;\n","}\n","#h2o-table-1 .h2o-table th,\n","#h2o-table-1 .h2o-table td {\n","  text-align: right;\n","  /* border: 1px solid; */\n","}\n","#h2o-table-1 .h2o-table tr:nth-child(even) {\n","  /* background: #F5F5F5 */\n","}\n","\n","</style>      \n","<div id=\"h2o-table-1\" class=\"h2o-container\">\n","  <table class=\"h2o-table\">\n","    <caption></caption>\n","    <thead></thead>\n","    <tbody><tr><td>H2O_cluster_uptime:</td>\n","<td>03 secs</td></tr>\n","<tr><td>H2O_cluster_timezone:</td>\n","<td>Etc/UTC</td></tr>\n","<tr><td>H2O_data_parsing_timezone:</td>\n","<td>UTC</td></tr>\n","<tr><td>H2O_cluster_version:</td>\n","<td>3.46.0.4</td></tr>\n","<tr><td>H2O_cluster_version_age:</td>\n","<td>5 months</td></tr>\n","<tr><td>H2O_cluster_name:</td>\n","<td>H2O_from_python_unknownUser_udv01m</td></tr>\n","<tr><td>H2O_cluster_total_nodes:</td>\n","<td>1</td></tr>\n","<tr><td>H2O_cluster_free_memory:</td>\n","<td>7.500 Gb</td></tr>\n","<tr><td>H2O_cluster_total_cores:</td>\n","<td>4</td></tr>\n","<tr><td>H2O_cluster_allowed_cores:</td>\n","<td>4</td></tr>\n","<tr><td>H2O_cluster_status:</td>\n","<td>locked, healthy</td></tr>\n","<tr><td>H2O_connection_url:</td>\n","<td>http://127.0.0.1:54321</td></tr>\n","<tr><td>H2O_connection_proxy:</td>\n","<td>{\"http\": null, \"https\": null}</td></tr>\n","<tr><td>H2O_internal_security:</td>\n","<td>False</td></tr>\n","<tr><td>Python_version:</td>\n","<td>3.10.14 final</td></tr></tbody>\n","  </table>\n","</div>\n"],"text/plain":["--------------------------  ----------------------------------\n","H2O_cluster_uptime:         03 secs\n","H2O_cluster_timezone:       Etc/UTC\n","H2O_data_parsing_timezone:  UTC\n","H2O_cluster_version:        3.46.0.4\n","H2O_cluster_version_age:    5 months\n","H2O_cluster_name:           H2O_from_python_unknownUser_udv01m\n","H2O_cluster_total_nodes:    1\n","H2O_cluster_free_memory:    7.500 Gb\n","H2O_cluster_total_cores:    4\n","H2O_cluster_allowed_cores:  4\n","H2O_cluster_status:         locked, healthy\n","H2O_connection_url:         http://127.0.0.1:54321\n","H2O_connection_proxy:       {\"http\": null, \"https\": null}\n","H2O_internal_security:      False\n","Python_version:             3.10.14 final\n","--------------------------  ----------------------------------"]},"metadata":{},"output_type":"display_data"}],"source":["# Initialize H2O cluster\n","h2o.init()"]},{"cell_type":"code","execution_count":3,"id":"2dfc10b9","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:16:50.583223Z","iopub.status.busy":"2024-12-10T07:16:50.58218Z","iopub.status.idle":"2024-12-10T07:16:50.747005Z","shell.execute_reply":"2024-12-10T07:16:50.746027Z"},"papermill":{"duration":0.182645,"end_time":"2024-12-10T07:16:50.749299","exception":false,"start_time":"2024-12-10T07:16:50.566654","status":"completed"},"tags":[]},"outputs":[],"source":["# Load and prepare the data\n","df = pd.read_csv('/kaggle/input/retail-data-set/file_out2.csv', parse_dates=['Date'])\n","df['TotalSales'] = df['TotalSales'] - df['Discount']\n","df['Date'] = pd.to_datetime(df['Date'])\n","df.set_index('Date', inplace=True)\n","daily_sales = df.resample('D')['TotalSales'].sum()\n","monthly_sales = daily_sales.resample('ME').sum().reset_index()"]},{"cell_type":"code","execution_count":4,"id":"3d6931f5","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:16:50.766859Z","iopub.status.busy":"2024-12-10T07:16:50.766414Z","iopub.status.idle":"2024-12-10T07:16:50.784907Z","shell.execute_reply":"2024-12-10T07:16:50.783794Z"},"papermill":{"duration":0.029568,"end_time":"2024-12-10T07:16:50.786913","exception":false,"start_time":"2024-12-10T07:16:50.757345","status":"completed"},"tags":[]},"outputs":[],"source":["# Feature engineering\n","monthly_sales['Log_TotalSales'] = np.log1p(monthly_sales['TotalSales'])\n","monthly_sales['Diff_TotalSales'] = monthly_sales['Log_TotalSales'].diff()\n","monthly_sales = monthly_sales.dropna()\n","\n","monthly_sales['Month'] = monthly_sales['Date'].dt.month\n","monthly_sales['Year'] = monthly_sales['Date'].dt.year\n","monthly_sales['Day_of_Week'] = monthly_sales['Date'].dt.dayofweek\n","monthly_sales['Week_of_Year'] = monthly_sales['Date'].dt.isocalendar().week.astype(int)  # Change dtype to int\n","monthly_sales['Day_of_Year'] = monthly_sales['Date'].dt.dayofyear\n","monthly_sales['Quarter'] = monthly_sales['Date'].dt.quarter"]},{"cell_type":"code","execution_count":5,"id":"aedf351f","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:16:50.8043Z","iopub.status.busy":"2024-12-10T07:16:50.803683Z","iopub.status.idle":"2024-12-10T07:16:50.809819Z","shell.execute_reply":"2024-12-10T07:16:50.808832Z"},"papermill":{"duration":0.017017,"end_time":"2024-12-10T07:16:50.811792","exception":false,"start_time":"2024-12-10T07:16:50.794775","status":"completed"},"tags":[]},"outputs":[],"source":["# Features and target variables\n","X = monthly_sales[['Month', 'Year', 'Day_of_Week', 'Week_of_Year', 'Day_of_Year', 'Quarter']]\n","y = monthly_sales['Diff_TotalSales']"]},{"cell_type":"code","execution_count":6,"id":"4a9b705f","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:16:50.829785Z","iopub.status.busy":"2024-12-10T07:16:50.829074Z","iopub.status.idle":"2024-12-10T07:16:50.8355Z","shell.execute_reply":"2024-12-10T07:16:50.83464Z"},"papermill":{"duration":0.017355,"end_time":"2024-12-10T07:16:50.837417","exception":false,"start_time":"2024-12-10T07:16:50.820062","status":"completed"},"tags":[]},"outputs":[],"source":["# Split into training and testing sets\n","train_data = monthly_sales[monthly_sales['Year'] < 2022]\n","test_data = monthly_sales[monthly_sales['Year'] == 2022]"]},{"cell_type":"code","execution_count":7,"id":"45742630","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:16:50.854428Z","iopub.status.busy":"2024-12-10T07:16:50.853855Z","iopub.status.idle":"2024-12-10T07:16:50.860924Z","shell.execute_reply":"2024-12-10T07:16:50.859951Z"},"papermill":{"duration":0.01789,"end_time":"2024-12-10T07:16:50.862882","exception":false,"start_time":"2024-12-10T07:16:50.844992","status":"completed"},"tags":[]},"outputs":[],"source":["X_train = train_data[['Month', 'Year', 'Day_of_Week', 'Week_of_Year', 'Day_of_Year', 'Quarter']]\n","y_train = train_data['Diff_TotalSales']\n","X_test = test_data[['Month', 'Year', 'Day_of_Week', 'Week_of_Year', 'Day_of_Year', 'Quarter']]\n","y_test = test_data['Diff_TotalSales']"]},{"cell_type":"code","execution_count":8,"id":"bc72cb60","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:16:50.880084Z","iopub.status.busy":"2024-12-10T07:16:50.87936Z","iopub.status.idle":"2024-12-10T07:16:52.143616Z","shell.execute_reply":"2024-12-10T07:16:52.14267Z"},"papermill":{"duration":1.275956,"end_time":"2024-12-10T07:16:52.146452","exception":false,"start_time":"2024-12-10T07:16:50.870496","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Parse progress: |████████████████████████████████████████████████████████████████| (done) 100%\n","Parse progress: |████████████████████████████████████████████████████████████████| (done) 100%\n"]}],"source":["# Convert to H2O frames\n","h2o_train = H2OFrame(pd.concat([X_train, y_train], axis=1))\n","h2o_test = H2OFrame(pd.concat([X_test, y_test], axis=1))"]},{"cell_type":"code","execution_count":9,"id":"49750ea7","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:16:52.166175Z","iopub.status.busy":"2024-12-10T07:16:52.16517Z","iopub.status.idle":"2024-12-10T07:16:52.170249Z","shell.execute_reply":"2024-12-10T07:16:52.169259Z"},"papermill":{"duration":0.016406,"end_time":"2024-12-10T07:16:52.172165","exception":false,"start_time":"2024-12-10T07:16:52.155759","status":"completed"},"tags":[]},"outputs":[],"source":["# Define predictors and response\n","predictors = ['Month', 'Year', 'Day_of_Week', 'Week_of_Year', 'Day_of_Year', 'Quarter']\n","response = 'Diff_TotalSales'"]},{"cell_type":"code","execution_count":10,"id":"3faac829","metadata":{"_kg_hide-output":true,"execution":{"iopub.execute_input":"2024-12-10T07:16:52.189356Z","iopub.status.busy":"2024-12-10T07:16:52.189028Z","iopub.status.idle":"2024-12-10T07:18:13.024777Z","shell.execute_reply":"2024-12-10T07:18:13.023553Z"},"papermill":{"duration":80.847247,"end_time":"2024-12-10T07:18:13.027241","exception":false,"start_time":"2024-12-10T07:16:52.179994","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["gbm Grid Build progress: |███████████████████████████████████████████████████████| (done) 100%\n","Errors/Warnings building gridsearch model\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_61.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_61.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_62.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_62.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_63.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_63.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_64.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_64.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_65.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_65.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_66.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_66.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_67.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_67.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_68.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_68.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_69.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_69.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_70.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_70.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_71.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_71.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_72.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_72.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_73.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_73.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_74.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_74.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_75.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_75.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_76.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_76.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_77.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_77.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_78.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_78.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_79.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_79.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 10\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_80.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_80.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_141.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_141.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_142.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_142.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_143.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_143.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_144.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_144.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_145.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_145.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_146.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_146.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_147.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_147.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_148.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_148.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_149.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_149.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_150.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_150.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_151.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_151.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_152.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_152.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_153.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_153.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_154.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_154.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_155.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_155.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_156.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_156.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_157.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_157.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_158.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_158.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_159.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_159.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 50\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_160.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_160.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_221.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_221.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_222.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_222.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_223.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_223.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_224.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_224.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_225.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_225.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_226.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_226.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_227.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_227.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_228.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_228.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_229.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_229.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_230.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_230.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_231.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_231.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_232.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_232.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_233.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_233.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_234.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_234.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_235.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_235.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_236.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_236.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_237.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_237.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_238.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_238.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_239.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_239.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 100\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_240.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_240.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_301.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_301.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_302.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_302.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_303.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_303.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_304.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_304.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_305.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_305.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_306.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_306.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_307.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_307.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_308.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_308.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_309.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_309.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_310.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_310.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_311.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_311.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_312.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_312.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_313.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_313.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_314.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_314.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_315.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_315.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_316.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_316.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_317.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_317.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_318.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_318.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_319.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_319.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 150\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_320.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_320.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_381.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_381.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_382.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_382.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_383.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_383.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_384.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_384.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 5\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_385.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_385.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_386.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_386.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_387.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_387.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_388.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_388.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_389.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_389.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 10\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_390.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_390.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_391.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_391.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_392.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_392.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_393.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_393.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_394.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_394.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 15\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_395.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_395.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.05\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_396.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_396.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.01\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_397.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_397.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.1\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_398.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_398.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.2\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_399.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_399.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-parameter: learn_rate, 0.5\n","Hyper-parameter: max_depth, 20\n","Hyper-parameter: min_rows, 20.0\n","Hyper-parameter: ntrees, 200\n","failure_details: Illegal argument(s) for GBM model: gbm_grid_model_400.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","failure_stack_traces: water.exceptions.H2OModelBuilderIllegalArgumentException: Illegal argument(s) for GBM model: gbm_grid_model_400.  Details: ERRR on field: _min_rows: The dataset size is too small to split for min_rows=20.0: must have at least 40.0 (weighted) rows, but have only 35.0.\n","\n","\tat water.exceptions.H2OModelBuilderIllegalArgumentException.makeFromBuilder(H2OModelBuilderIllegalArgumentException.java:19)\n","\tat hex.tree.gbm.GBM.init(GBM.java:100)\n","\tat hex.tree.SharedTree$Driver.computeImpl(SharedTree.java:236)\n","\tat hex.ModelBuilder$Driver.compute2(ModelBuilder.java:253)\n","\tat water.H2O$H2OCountedCompleter.compute(H2O.java:1704)\n","\tat jsr166y.CountedCompleter.exec(CountedCompleter.java:468)\n","\tat jsr166y.ForkJoinTask.doExec(ForkJoinTask.java:263)\n","\tat jsr166y.ForkJoinPool$WorkQueue.runTask(ForkJoinPool.java:976)\n","\tat jsr166y.ForkJoinPool.runWorker(ForkJoinPool.java:1479)\n","\tat jsr166y.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:104)\n","\n","\n","Hyper-Parameter Search Summary: ordered by increasing mse\n","     learn_rate    max_depth    min_rows    ntrees    model_ids           mse\n","---  ------------  -----------  ----------  --------  ------------------  ---------------------\n","     0.5           20.0         1.0         50.0      gbm_grid_model_100  4.731334371907029e-16\n","     0.5           15.0         1.0         100.0     gbm_grid_model_175  4.731334371907029e-16\n","     0.5           20.0         1.0         100.0     gbm_grid_model_180  4.731334371907029e-16\n","     0.5           15.0         1.0         150.0     gbm_grid_model_255  4.731334371907029e-16\n","     0.5           20.0         1.0         150.0     gbm_grid_model_260  4.731334371907029e-16\n","     0.5           15.0         1.0         200.0     gbm_grid_model_335  4.731334371907029e-16\n","     0.5           20.0         1.0         200.0     gbm_grid_model_340  4.731334371907029e-16\n","     0.5           15.0         1.0         50.0      gbm_grid_model_95   4.731334371907029e-16\n","     0.5           10.0         1.0         100.0     gbm_grid_model_170  4.790810605369091e-16\n","     0.5           10.0         1.0         150.0     gbm_grid_model_250  4.790810605369091e-16\n","---  ---           ---          ---         ---       ---                 ---\n","     0.01          15.0         10.0        50.0      gbm_grid_model_132  0.13016459147680454\n","     0.01          20.0         10.0        50.0      gbm_grid_model_137  0.13016459147680454\n","     0.01          5.0          5.0         10.0      gbm_grid_model_22   0.13991325362469365\n","     0.01          10.0         5.0         10.0      gbm_grid_model_27   0.13991325362469365\n","     0.01          15.0         5.0         10.0      gbm_grid_model_32   0.13991325362469365\n","     0.01          20.0         5.0         10.0      gbm_grid_model_37   0.13991325362469365\n","     0.01          5.0          10.0        10.0      gbm_grid_model_42   0.14223276796075005\n","     0.01          10.0         10.0        10.0      gbm_grid_model_47   0.14223276796075005\n","     0.01          15.0         10.0        10.0      gbm_grid_model_52   0.14223276796075005\n","     0.01          20.0         10.0        10.0      gbm_grid_model_57   0.14223276796075005\n","[300 rows x 7 columns]\n","\n"]}],"source":["from h2o.grid.grid_search import H2OGridSearch\n","\n","# Define the hyperparameter grid\n","hyper_params = {\n","    'ntrees': [10,50, 100, 150,200],\n","    'max_depth': [5, 10, 15,20],\n","    'min_rows': [1, 5, 10,20],\n","    'learn_rate': [0.05,0.01, 0.1, 0.2,0.5]\n","}\n","\n","# Create an H2OGridSearch object\n","grid = H2OGridSearch(\n","    model=H2OGradientBoostingEstimator,\n","    hyper_params=hyper_params,\n","    grid_id='gbm_grid'\n",")\n","\n","# Train the grid search object\n","grid.train(x=predictors, y=response, training_frame=h2o_train)\n","\n","# Get the grid search results\n","grid_results = grid.get_grid(sort_by='mse', decreasing=False)\n","print(grid_results)"]},{"cell_type":"code","execution_count":11,"id":"a10baf49","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:13.050933Z","iopub.status.busy":"2024-12-10T07:18:13.050479Z","iopub.status.idle":"2024-12-10T07:18:13.953824Z","shell.execute_reply":"2024-12-10T07:18:13.952785Z"},"papermill":{"duration":0.918667,"end_time":"2024-12-10T07:18:13.956883","exception":false,"start_time":"2024-12-10T07:18:13.038216","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["gbm Model Build progress: |██████████████████████████████████████████████████████| (done) 100%\n"]},{"data":{"text/html":["<pre style='margin: 1em 0 1em 0;'>Model Details\n","=============\n","H2OGradientBoostingEstimator : Gradient Boosting Machine\n","Model Key: GBM_model_python_1733815004309_1\n","</pre>\n","<div style='margin: 1em 0 1em 0;'>\n","<style>\n","\n","#h2o-table-2.h2o-container {\n","  overflow-x: auto;\n","}\n","#h2o-table-2 .h2o-table {\n","  /* width: 100%; */\n","  margin-top: 1em;\n","  margin-bottom: 1em;\n","}\n","#h2o-table-2 .h2o-table caption {\n","  white-space: nowrap;\n","  caption-side: top;\n","  text-align: left;\n","  /* margin-left: 1em; */\n","  margin: 0;\n","  font-size: larger;\n","}\n","#h2o-table-2 .h2o-table thead {\n","  white-space: nowrap; \n","  position: sticky;\n","  top: 0;\n","  box-shadow: 0 -1px inset;\n","}\n","#h2o-table-2 .h2o-table tbody {\n","  overflow: auto;\n","}\n","#h2o-table-2 .h2o-table th,\n","#h2o-table-2 .h2o-table td {\n","  text-align: right;\n","  /* border: 1px solid; */\n","}\n","#h2o-table-2 .h2o-table tr:nth-child(even) {\n","  /* background: #F5F5F5 */\n","}\n","\n","</style>      \n","<div id=\"h2o-table-2\" class=\"h2o-container\">\n","  <table class=\"h2o-table\">\n","    <caption>Model Summary: </caption>\n","    <thead><tr><th></th>\n","<th>number_of_trees</th>\n","<th>number_of_internal_trees</th>\n","<th>model_size_in_bytes</th>\n","<th>min_depth</th>\n","<th>max_depth</th>\n","<th>mean_depth</th>\n","<th>min_leaves</th>\n","<th>max_leaves</th>\n","<th>mean_leaves</th></tr></thead>\n","    <tbody><tr><td></td>\n","<td>50.0</td>\n","<td>50.0</td>\n","<td>24998.0</td>\n","<td>10.0</td>\n","<td>13.0</td>\n","<td>11.0</td>\n","<td>35.0</td>\n","<td>35.0</td>\n","<td>35.0</td></tr></tbody>\n","  </table>\n","</div>\n","</div>\n","<div style='margin: 1em 0 1em 0;'><pre style='margin: 1em 0 1em 0;'>ModelMetricsRegression: gbm\n","** Reported on train data. **\n","\n","MSE: 4.731334371907029e-16\n","RMSE: 2.175163067888711e-08\n","MAE: 1.1654836790902274e-08\n","RMSLE: 7.625360338088826e-08\n","Mean Residual Deviance: 4.731334371907029e-16</pre></div>\n","<div style='margin: 1em 0 1em 0;'><pre style='margin: 1em 0 1em 0;'>ModelMetricsRegression: gbm\n","** Reported on cross-validation data. **\n","\n","MSE: 0.3343488427454337\n","RMSE: 0.5782290573340583\n","MAE: 0.4874181894613981\n","RMSLE: 0.7819388577374892\n","Mean Residual Deviance: 0.3343488427454337</pre></div>\n","<div style='margin: 1em 0 1em 0;'>\n","<style>\n","\n","#h2o-table-3.h2o-container {\n","  overflow-x: auto;\n","}\n","#h2o-table-3 .h2o-table {\n","  /* width: 100%; */\n","  margin-top: 1em;\n","  margin-bottom: 1em;\n","}\n","#h2o-table-3 .h2o-table caption {\n","  white-space: nowrap;\n","  caption-side: top;\n","  text-align: left;\n","  /* margin-left: 1em; */\n","  margin: 0;\n","  font-size: larger;\n","}\n","#h2o-table-3 .h2o-table thead {\n","  white-space: nowrap; \n","  position: sticky;\n","  top: 0;\n","  box-shadow: 0 -1px inset;\n","}\n","#h2o-table-3 .h2o-table tbody {\n","  overflow: auto;\n","}\n","#h2o-table-3 .h2o-table th,\n","#h2o-table-3 .h2o-table td {\n","  text-align: right;\n","  /* border: 1px solid; */\n","}\n","#h2o-table-3 .h2o-table tr:nth-child(even) {\n","  /* background: #F5F5F5 */\n","}\n","\n","</style>      \n","<div id=\"h2o-table-3\" class=\"h2o-container\">\n","  <table class=\"h2o-table\">\n","    <caption>Cross-Validation Metrics Summary: </caption>\n","    <thead><tr><th></th>\n","<th>mean</th>\n","<th>sd</th>\n","<th>cv_1_valid</th>\n","<th>cv_2_valid</th>\n","<th>cv_3_valid</th>\n","<th>cv_4_valid</th>\n","<th>cv_5_valid</th></tr></thead>\n","    <tbody><tr><td>aic</td>\n","<td>nan</td>\n","<td>0.0</td>\n","<td>nan</td>\n","<td>nan</td>\n","<td>nan</td>\n","<td>nan</td>\n","<td>nan</td></tr>\n","<tr><td>loglikelihood</td>\n","<td>nan</td>\n","<td>0.0</td>\n","<td>nan</td>\n","<td>nan</td>\n","<td>nan</td>\n","<td>nan</td>\n","<td>nan</td></tr>\n","<tr><td>mae</td>\n","<td>0.5457021</td>\n","<td>0.1884217</td>\n","<td>0.3185509</td>\n","<td>0.7169269</td>\n","<td>0.4497386</td>\n","<td>0.4796063</td>\n","<td>0.7636876</td></tr>\n","<tr><td>mean_residual_deviance</td>\n","<td>0.3867886</td>\n","<td>0.2196961</td>\n","<td>0.1723035</td>\n","<td>0.661439</td>\n","<td>0.2506383</td>\n","<td>0.2663434</td>\n","<td>0.5832188</td></tr>\n","<tr><td>mse</td>\n","<td>0.3867886</td>\n","<td>0.2196961</td>\n","<td>0.1723035</td>\n","<td>0.661439</td>\n","<td>0.2506383</td>\n","<td>0.2663434</td>\n","<td>0.5832188</td></tr>\n","<tr><td>r2</td>\n","<td>-inf</td>\n","<td>nan</td>\n","<td>-0.4304903</td>\n","<td>-3.1860197</td>\n","<td>-1.0772755</td>\n","<td>-0.4730289</td>\n","<td>-inf</td></tr>\n","<tr><td>residual_deviance</td>\n","<td>0.3867886</td>\n","<td>0.2196961</td>\n","<td>0.1723035</td>\n","<td>0.661439</td>\n","<td>0.2506383</td>\n","<td>0.2663434</td>\n","<td>0.5832188</td></tr>\n","<tr><td>rmse</td>\n","<td>0.6017588</td>\n","<td>0.1756239</td>\n","<td>0.4150946</td>\n","<td>0.813289</td>\n","<td>0.5006379</td>\n","<td>0.5160847</td>\n","<td>0.7636876</td></tr>\n","<tr><td>rmsle</td>\n","<td>0.8005424</td>\n","<td>0.2930386</td>\n","<td>0.781107</td>\n","<td>1.0980544</td>\n","<td>0.5600234</td>\n","<td>0.4686817</td>\n","<td>1.0948457</td></tr></tbody>\n","  </table>\n","</div>\n","</div>\n","<div style='margin: 1em 0 1em 0;'>\n","<style>\n","\n","#h2o-table-4.h2o-container {\n","  overflow-x: auto;\n","}\n","#h2o-table-4 .h2o-table {\n","  /* width: 100%; */\n","  margin-top: 1em;\n","  margin-bottom: 1em;\n","}\n","#h2o-table-4 .h2o-table caption {\n","  white-space: nowrap;\n","  caption-side: top;\n","  text-align: left;\n","  /* margin-left: 1em; */\n","  margin: 0;\n","  font-size: larger;\n","}\n","#h2o-table-4 .h2o-table thead {\n","  white-space: nowrap; \n","  position: sticky;\n","  top: 0;\n","  box-shadow: 0 -1px inset;\n","}\n","#h2o-table-4 .h2o-table tbody {\n","  overflow: auto;\n","}\n","#h2o-table-4 .h2o-table th,\n","#h2o-table-4 .h2o-table td {\n","  text-align: right;\n","  /* border: 1px solid; */\n","}\n","#h2o-table-4 .h2o-table tr:nth-child(even) {\n","  /* background: #F5F5F5 */\n","}\n","\n","</style>      \n","<div id=\"h2o-table-4\" class=\"h2o-container\">\n","  <table class=\"h2o-table\">\n","    <caption>Scoring History: </caption>\n","    <thead><tr><th></th>\n","<th>timestamp</th>\n","<th>duration</th>\n","<th>number_of_trees</th>\n","<th>training_rmse</th>\n","<th>training_mae</th>\n","<th>training_deviance</th></tr></thead>\n","    <tbody><tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.602 sec</td>\n","<td>0.0</td>\n","<td>0.3830431</td>\n","<td>0.2897746</td>\n","<td>0.1467220</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.605 sec</td>\n","<td>1.0</td>\n","<td>0.1915215</td>\n","<td>0.1448873</td>\n","<td>0.0366805</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.607 sec</td>\n","<td>2.0</td>\n","<td>0.0957608</td>\n","<td>0.0724436</td>\n","<td>0.0091701</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.609 sec</td>\n","<td>3.0</td>\n","<td>0.0478804</td>\n","<td>0.0362218</td>\n","<td>0.0022925</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.611 sec</td>\n","<td>4.0</td>\n","<td>0.0239402</td>\n","<td>0.0181109</td>\n","<td>0.0005731</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.613 sec</td>\n","<td>5.0</td>\n","<td>0.0119701</td>\n","<td>0.0090555</td>\n","<td>0.0001433</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.615 sec</td>\n","<td>6.0</td>\n","<td>0.0059851</td>\n","<td>0.0045277</td>\n","<td>0.0000358</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.617 sec</td>\n","<td>7.0</td>\n","<td>0.0029925</td>\n","<td>0.0022639</td>\n","<td>0.0000090</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.619 sec</td>\n","<td>8.0</td>\n","<td>0.0014963</td>\n","<td>0.0011319</td>\n","<td>0.0000022</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.624 sec</td>\n","<td>9.0</td>\n","<td>0.0007481</td>\n","<td>0.0005660</td>\n","<td>0.0000006</td></tr>\n","<tr><td>---</td>\n","<td>---</td>\n","<td>---</td>\n","<td>---</td>\n","<td>---</td>\n","<td>---</td>\n","<td>---</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.718 sec</td>\n","<td>41.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.720 sec</td>\n","<td>42.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.723 sec</td>\n","<td>43.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.728 sec</td>\n","<td>44.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.730 sec</td>\n","<td>45.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.732 sec</td>\n","<td>46.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.735 sec</td>\n","<td>47.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.737 sec</td>\n","<td>48.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.739 sec</td>\n","<td>49.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:13</td>\n","<td> 0.742 sec</td>\n","<td>50.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr></tbody>\n","  </table>\n","</div>\n","<pre style='font-size: smaller; margin-bottom: 1em;'>[51 rows x 7 columns]</pre></div>\n","<div style='margin: 1em 0 1em 0;'>\n","<style>\n","\n","#h2o-table-5.h2o-container {\n","  overflow-x: auto;\n","}\n","#h2o-table-5 .h2o-table {\n","  /* width: 100%; */\n","  margin-top: 1em;\n","  margin-bottom: 1em;\n","}\n","#h2o-table-5 .h2o-table caption {\n","  white-space: nowrap;\n","  caption-side: top;\n","  text-align: left;\n","  /* margin-left: 1em; */\n","  margin: 0;\n","  font-size: larger;\n","}\n","#h2o-table-5 .h2o-table thead {\n","  white-space: nowrap; \n","  position: sticky;\n","  top: 0;\n","  box-shadow: 0 -1px inset;\n","}\n","#h2o-table-5 .h2o-table tbody {\n","  overflow: auto;\n","}\n","#h2o-table-5 .h2o-table th,\n","#h2o-table-5 .h2o-table td {\n","  text-align: right;\n","  /* border: 1px solid; */\n","}\n","#h2o-table-5 .h2o-table tr:nth-child(even) {\n","  /* background: #F5F5F5 */\n","}\n","\n","</style>      \n","<div id=\"h2o-table-5\" class=\"h2o-container\">\n","  <table class=\"h2o-table\">\n","    <caption>Variable Importances: </caption>\n","    <thead><tr><th>variable</th>\n","<th>relative_importance</th>\n","<th>scaled_importance</th>\n","<th>percentage</th></tr></thead>\n","    <tbody><tr><td>Week_of_Year</td>\n","<td>2.1245112</td>\n","<td>1.0</td>\n","<td>0.3102823</td></tr>\n","<tr><td>Month</td>\n","<td>1.5576066</td>\n","<td>0.7331600</td>\n","<td>0.2274866</td></tr>\n","<tr><td>Year</td>\n","<td>1.1731895</td>\n","<td>0.5522162</td>\n","<td>0.1713429</td></tr>\n","<tr><td>Day_of_Year</td>\n","<td>1.0033969</td>\n","<td>0.4722954</td>\n","<td>0.1465449</td></tr>\n","<tr><td>Day_of_Week</td>\n","<td>0.9882063</td>\n","<td>0.4651452</td>\n","<td>0.1443264</td></tr>\n","<tr><td>Quarter</td>\n","<td>0.0001154</td>\n","<td>0.0000543</td>\n","<td>0.0000169</td></tr></tbody>\n","  </table>\n","</div>\n","</div><pre style=\"font-size: smaller; margin: 1em 0 0 0;\">\n","\n","[tips]\n","Use `model.explain()` to inspect the model.\n","--\n","Use `h2o.display.toggle_user_tips()` to switch on/off this section.</pre>"],"text/plain":["Model Details\n","=============\n","H2OGradientBoostingEstimator : Gradient Boosting Machine\n","Model Key: GBM_model_python_1733815004309_1\n","\n","\n","Model Summary: \n","    number_of_trees    number_of_internal_trees    model_size_in_bytes    min_depth    max_depth    mean_depth    min_leaves    max_leaves    mean_leaves\n","--  -----------------  --------------------------  ---------------------  -----------  -----------  ------------  ------------  ------------  -------------\n","    50                 50                          24998                  10           13           11            35            35            35\n","\n","ModelMetricsRegression: gbm\n","** Reported on train data. **\n","\n","MSE: 4.731334371907029e-16\n","RMSE: 2.175163067888711e-08\n","MAE: 1.1654836790902274e-08\n","RMSLE: 7.625360338088826e-08\n","Mean Residual Deviance: 4.731334371907029e-16\n","\n","ModelMetricsRegression: gbm\n","** Reported on cross-validation data. **\n","\n","MSE: 0.3343488427454337\n","RMSE: 0.5782290573340583\n","MAE: 0.4874181894613981\n","RMSLE: 0.7819388577374892\n","Mean Residual Deviance: 0.3343488427454337\n","\n","Cross-Validation Metrics Summary: \n","                        mean      sd        cv_1_valid    cv_2_valid    cv_3_valid    cv_4_valid    cv_5_valid\n","----------------------  --------  --------  ------------  ------------  ------------  ------------  ------------\n","aic                     nan       0         nan           nan           nan           nan           nan\n","loglikelihood           nan       0         nan           nan           nan           nan           nan\n","mae                     0.545702  0.188422  0.318551      0.716927      0.449739      0.479606      0.763688\n","mean_residual_deviance  0.386789  0.219696  0.172304      0.661439      0.250638      0.266343      0.583219\n","mse                     0.386789  0.219696  0.172304      0.661439      0.250638      0.266343      0.583219\n","r2                      -inf      nan       -0.43049      -3.18602      -1.07728      -0.473029     -inf\n","residual_deviance       0.386789  0.219696  0.172304      0.661439      0.250638      0.266343      0.583219\n","rmse                    0.601759  0.175624  0.415095      0.813289      0.500638      0.516085      0.763688\n","rmsle                   0.800542  0.293039  0.781107      1.09805       0.560023      0.468682      1.09485\n","\n","Scoring History: \n","     timestamp            duration    number_of_trees    training_rmse          training_mae            training_deviance\n","---  -------------------  ----------  -----------------  ---------------------  ----------------------  ----------------------\n","     2024-12-10 07:18:13  0.602 sec   0.0                0.3830430671867585     0.28977457197559164     0.1467219913198396\n","     2024-12-10 07:18:13  0.605 sec   1.0                0.19152153349693282    0.1448872858658433      0.036680497793016756\n","     2024-12-10 07:18:13  0.607 sec   2.0                0.09576076604953775    0.07244364150932857     0.009170124314394302\n","     2024-12-10 07:18:13  0.609 sec   3.0                0.04788038692892089    0.03622182362845966     0.002292531452463178\n","     2024-12-10 07:18:13  0.611 sec   4.0                0.023940194853889964   0.018110912665724753    0.0005731329296422195\n","     2024-12-10 07:18:13  0.613 sec   5.0                0.011970098576654075   0.009055457477058684    0.00014328325993481593\n","     2024-12-10 07:18:13  0.615 sec   6.0                0.005985052151385846   0.004527731080140387    3.582084925480834e-05\n","     2024-12-10 07:18:13  0.617 sec   7.0                0.0029925280763102476  0.002263867376106126    8.955224287505111e-06\n","     2024-12-10 07:18:13  0.619 sec   8.0                0.0014962601861083142  0.0011319313198328018   2.2387945445328872e-06\n","     2024-12-10 07:18:13  0.624 sec   9.0                0.0007481269967738275  0.0005659641964094979   5.596940033018265e-07\n","---  ---                  ---         ---                ---                    ---                     ---\n","     2024-12-10 07:18:13  0.718 sec   41.0               2.175163067888711e-08  1.1654836790902274e-08  4.731334371907029e-16\n","     2024-12-10 07:18:13  0.720 sec   42.0               2.175163067888711e-08  1.1654836790902274e-08  4.731334371907029e-16\n","     2024-12-10 07:18:13  0.723 sec   43.0               2.175163067888711e-08  1.1654836790902274e-08  4.731334371907029e-16\n","     2024-12-10 07:18:13  0.728 sec   44.0               2.175163067888711e-08  1.1654836790902274e-08  4.731334371907029e-16\n","     2024-12-10 07:18:13  0.730 sec   45.0               2.175163067888711e-08  1.1654836790902274e-08  4.731334371907029e-16\n","     2024-12-10 07:18:13  0.732 sec   46.0               2.175163067888711e-08  1.1654836790902274e-08  4.731334371907029e-16\n","     2024-12-10 07:18:13  0.735 sec   47.0               2.175163067888711e-08  1.1654836790902274e-08  4.731334371907029e-16\n","     2024-12-10 07:18:13  0.737 sec   48.0               2.175163067888711e-08  1.1654836790902274e-08  4.731334371907029e-16\n","     2024-12-10 07:18:13  0.739 sec   49.0               2.175163067888711e-08  1.1654836790902274e-08  4.731334371907029e-16\n","     2024-12-10 07:18:13  0.742 sec   50.0               2.175163067888711e-08  1.1654836790902274e-08  4.731334371907029e-16\n","[51 rows x 7 columns]\n","\n","\n","Variable Importances: \n","variable      relative_importance    scaled_importance    percentage\n","------------  ---------------------  -------------------  ------------\n","Week_of_Year  2.12451                1                    0.310282\n","Month         1.55761                0.73316              0.227487\n","Year          1.17319                0.552216             0.171343\n","Day_of_Year   1.0034                 0.472295             0.146545\n","Day_of_Week   0.988206               0.465145             0.144326\n","Quarter       0.000115443            5.43385e-05          1.68603e-05\n","\n","[tips]\n","Use `model.explain()` to inspect the model.\n","--\n","Use `h2o.display.toggle_user_tips()` to switch on/off this section."]},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":["# Initialize and train the H2O Random Forest model\n","rf_model = H2OGradientBoostingEstimator(nfolds=5, learn_rate=0.5, max_depth=20, min_rows=1,ntrees=50, seed=0)\n","rf_model.train(x=predictors, y=response, training_frame=h2o_train)"]},{"cell_type":"code","execution_count":12,"id":"4ae48983","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:13.987932Z","iopub.status.busy":"2024-12-10T07:18:13.987203Z","iopub.status.idle":"2024-12-10T07:18:14.01994Z","shell.execute_reply":"2024-12-10T07:18:14.018836Z"},"papermill":{"duration":0.048739,"end_time":"2024-12-10T07:18:14.022788","exception":false,"start_time":"2024-12-10T07:18:13.974049","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["ModelMetricsRegression: gbm\n","** Reported on test data. **\n","\n","MSE: 0.4211769663049702\n","RMSE: 0.6489814837920803\n","MAE: 0.5408645750085018\n","RMSLE: 1.0418560616187966\n","Mean Residual Deviance: 0.4211769663049702\n"]}],"source":["performance = rf_model.model_performance(test_data=h2o_test)\n","print(performance)"]},{"cell_type":"code","execution_count":13,"id":"37abb559","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:14.053335Z","iopub.status.busy":"2024-12-10T07:18:14.05217Z","iopub.status.idle":"2024-12-10T07:18:14.072497Z","shell.execute_reply":"2024-12-10T07:18:14.071419Z"},"papermill":{"duration":0.03593,"end_time":"2024-12-10T07:18:14.074609","exception":false,"start_time":"2024-12-10T07:18:14.038679","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["gbm prediction progress: |███████████████████████████████████████████████████████| (done) 100%\n"]}],"source":["# Make predictions\n","predictions = rf_model.predict(h2o_test)"]},{"cell_type":"code","execution_count":14,"id":"d4183d75","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:14.100349Z","iopub.status.busy":"2024-12-10T07:18:14.09999Z","iopub.status.idle":"2024-12-10T07:18:14.13145Z","shell.execute_reply":"2024-12-10T07:18:14.130385Z"},"papermill":{"duration":0.046639,"end_time":"2024-12-10T07:18:14.133702","exception":false,"start_time":"2024-12-10T07:18:14.087063","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["/opt/conda/lib/python3.10/site-packages/h2o/frame.py:1981: H2ODependencyWarning: Converting H2O frame to pandas dataframe using single-thread.  For faster conversion using multi-thread, install polars and pyarrow and use it as pandas_df = h2o_df.as_data_frame(use_multi_thread=True)\n","\n","  warnings.warn(\"Converting H2O frame to pandas dataframe using single-thread.  For faster conversion using\"\n"]}],"source":["# Convert predictions to pandas DataFrame\n","predictions_df = predictions.as_data_frame()"]},{"cell_type":"code","execution_count":15,"id":"a38f6f60","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:14.159935Z","iopub.status.busy":"2024-12-10T07:18:14.159529Z","iopub.status.idle":"2024-12-10T07:18:14.164075Z","shell.execute_reply":"2024-12-10T07:18:14.163191Z"},"papermill":{"duration":0.019801,"end_time":"2024-12-10T07:18:14.165931","exception":false,"start_time":"2024-12-10T07:18:14.14613","status":"completed"},"tags":[]},"outputs":[],"source":["# Extract the predictions column from the DataFrame\n","predictions_column = predictions_df['predict'].values"]},{"cell_type":"code","execution_count":16,"id":"7b2270d0","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:14.191904Z","iopub.status.busy":"2024-12-10T07:18:14.191483Z","iopub.status.idle":"2024-12-10T07:18:14.19591Z","shell.execute_reply":"2024-12-10T07:18:14.19508Z"},"papermill":{"duration":0.019522,"end_time":"2024-12-10T07:18:14.197747","exception":false,"start_time":"2024-12-10T07:18:14.178225","status":"completed"},"tags":[]},"outputs":[],"source":["# Compute the cumulative sum of the predictions\n","y_pred_cumsum = np.cumsum(predictions_column)"]},{"cell_type":"code","execution_count":17,"id":"0a24a76c","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:14.222923Z","iopub.status.busy":"2024-12-10T07:18:14.222505Z","iopub.status.idle":"2024-12-10T07:18:14.227394Z","shell.execute_reply":"2024-12-10T07:18:14.226573Z"},"papermill":{"duration":0.019407,"end_time":"2024-12-10T07:18:14.229158","exception":false,"start_time":"2024-12-10T07:18:14.209751","status":"completed"},"tags":[]},"outputs":[],"source":["# Compute the original scale of predictions\n","log_total_sales_last = monthly_sales['Log_TotalSales'].iloc[-1]\n","y_pred_original = np.expm1(y_pred_cumsum + log_total_sales_last - y_pred_cumsum[0])"]},{"cell_type":"code","execution_count":18,"id":"27c55222","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:14.254377Z","iopub.status.busy":"2024-12-10T07:18:14.254016Z","iopub.status.idle":"2024-12-10T07:18:14.276872Z","shell.execute_reply":"2024-12-10T07:18:14.275904Z"},"papermill":{"duration":0.03767,"end_time":"2024-12-10T07:18:14.278832","exception":false,"start_time":"2024-12-10T07:18:14.241162","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["/tmp/ipykernel_17/1407121428.py:2: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  test_data['Predictions'] = y_pred_original\n","/tmp/ipykernel_17/1407121428.py:3: FutureWarning: 'Y' is deprecated and will be removed in a future version, please use 'YE' instead.\n","  test_data_yearly = test_data.groupby('Date').sum().resample('Y').sum()['TotalSales']\n","/tmp/ipykernel_17/1407121428.py:4: FutureWarning: 'Y' is deprecated and will be removed in a future version, please use 'YE' instead.\n","  pred_yearly = test_data.groupby('Date').sum().resample('Y').sum()['Predictions']\n"]}],"source":["# Collecting test data on an annual basis\n","test_data['Predictions'] = y_pred_original\n","test_data_yearly = test_data.groupby('Date').sum().resample('Y').sum()['TotalSales']\n","pred_yearly = test_data.groupby('Date').sum().resample('Y').sum()['Predictions']"]},{"cell_type":"code","execution_count":19,"id":"9390f72a","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:14.304436Z","iopub.status.busy":"2024-12-10T07:18:14.304073Z","iopub.status.idle":"2024-12-10T07:18:15.195847Z","shell.execute_reply":"2024-12-10T07:18:15.194772Z"},"papermill":{"duration":0.906856,"end_time":"2024-12-10T07:18:15.197898","exception":false,"start_time":"2024-12-10T07:18:14.291042","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["H2O Gradient Boosting RMSE: 1132448.85\n","H2O Gradient Boosting MSE: 1282440408839.76\n","H2O Gradient Boosting MAPE: 4.36%\n"]}],"source":["from sklearn.metrics import mean_squared_error, mean_absolute_percentage_error\n","\n","# Calculating error metrics\n","rmse = np.sqrt(mean_squared_error(test_data_yearly, pred_yearly))\n","mse = mean_squared_error(test_data_yearly, pred_yearly)\n","mape = mean_absolute_percentage_error(test_data_yearly, pred_yearly) * 100\n","\n","print(f'H2O Gradient Boosting RMSE: {rmse:.2f}')\n","print(f'H2O Gradient Boosting MSE: {mse:.2f}')\n","print(f'H2O Gradient Boosting MAPE: {mape:.2f}%')"]},{"cell_type":"code","execution_count":20,"id":"9878070d","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:15.224342Z","iopub.status.busy":"2024-12-10T07:18:15.223551Z","iopub.status.idle":"2024-12-10T07:18:15.649571Z","shell.execute_reply":"2024-12-10T07:18:15.648558Z"},"papermill":{"duration":0.441335,"end_time":"2024-12-10T07:18:15.651759","exception":false,"start_time":"2024-12-10T07:18:15.210424","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 1400x700 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Visualizing results\n","plt.figure(figsize=(14, 7))\n","plt.plot(monthly_sales['Date'], monthly_sales['TotalSales'], label='Actual Sales', marker='o')\n","plt.plot(test_data['Date'], test_data['Predictions'], label='Predictions', marker='o', color='red')\n","plt.xlabel('Date')\n","plt.ylabel('Total Sales')\n","plt.title('H2O Gradient Boosting Predictions - Monthly')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":21,"id":"a2d19015","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:15.680361Z","iopub.status.busy":"2024-12-10T07:18:15.679989Z","iopub.status.idle":"2024-12-10T07:18:15.930019Z","shell.execute_reply":"2024-12-10T07:18:15.929055Z"},"papermill":{"duration":0.266973,"end_time":"2024-12-10T07:18:15.932181","exception":false,"start_time":"2024-12-10T07:18:15.665208","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Parse progress: |████████████████████████████████████████████████████████████████| (done) 100%\n"]}],"source":["# Convert to H2O frames\n","h2o_data = H2OFrame(pd.concat([X, y], axis=1))"]},{"cell_type":"code","execution_count":22,"id":"5692df40","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:15.961232Z","iopub.status.busy":"2024-12-10T07:18:15.960854Z","iopub.status.idle":"2024-12-10T07:18:16.86383Z","shell.execute_reply":"2024-12-10T07:18:16.862675Z"},"papermill":{"duration":0.919821,"end_time":"2024-12-10T07:18:16.865916","exception":false,"start_time":"2024-12-10T07:18:15.946095","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["gbm Model Build progress: |██████████████████████████████████████████████████████| (done) 100%\n"]},{"data":{"text/html":["<pre style='margin: 1em 0 1em 0;'>Model Details\n","=============\n","H2OGradientBoostingEstimator : Gradient Boosting Machine\n","Model Key: GBM_model_python_1733815004309_2\n","</pre>\n","<div style='margin: 1em 0 1em 0;'>\n","<style>\n","\n","#h2o-table-6.h2o-container {\n","  overflow-x: auto;\n","}\n","#h2o-table-6 .h2o-table {\n","  /* width: 100%; */\n","  margin-top: 1em;\n","  margin-bottom: 1em;\n","}\n","#h2o-table-6 .h2o-table caption {\n","  white-space: nowrap;\n","  caption-side: top;\n","  text-align: left;\n","  /* margin-left: 1em; */\n","  margin: 0;\n","  font-size: larger;\n","}\n","#h2o-table-6 .h2o-table thead {\n","  white-space: nowrap; \n","  position: sticky;\n","  top: 0;\n","  box-shadow: 0 -1px inset;\n","}\n","#h2o-table-6 .h2o-table tbody {\n","  overflow: auto;\n","}\n","#h2o-table-6 .h2o-table th,\n","#h2o-table-6 .h2o-table td {\n","  text-align: right;\n","  /* border: 1px solid; */\n","}\n","#h2o-table-6 .h2o-table tr:nth-child(even) {\n","  /* background: #F5F5F5 */\n","}\n","\n","</style>      \n","<div id=\"h2o-table-6\" class=\"h2o-container\">\n","  <table class=\"h2o-table\">\n","    <caption>Model Summary: </caption>\n","    <thead><tr><th></th>\n","<th>number_of_trees</th>\n","<th>number_of_internal_trees</th>\n","<th>model_size_in_bytes</th>\n","<th>min_depth</th>\n","<th>max_depth</th>\n","<th>mean_depth</th>\n","<th>min_leaves</th>\n","<th>max_leaves</th>\n","<th>mean_leaves</th></tr></thead>\n","    <tbody><tr><td></td>\n","<td>50.0</td>\n","<td>50.0</td>\n","<td>34290.0</td>\n","<td>10.0</td>\n","<td>13.0</td>\n","<td>11.46</td>\n","<td>50.0</td>\n","<td>50.0</td>\n","<td>50.0</td></tr></tbody>\n","  </table>\n","</div>\n","</div>\n","<div style='margin: 1em 0 1em 0;'><pre style='margin: 1em 0 1em 0;'>ModelMetricsRegression: gbm\n","** Reported on train data. **\n","\n","MSE: 4.222490412875146e-16\n","RMSE: 2.054869926023335e-08\n","MAE: 1.0263174772262573e-08\n","RMSLE: 6.41000473957424e-08\n","Mean Residual Deviance: 4.222490412875146e-16</pre></div>\n","<div style='margin: 1em 0 1em 0;'><pre style='margin: 1em 0 1em 0;'>ModelMetricsRegression: gbm\n","** Reported on cross-validation data. **\n","\n","MSE: 0.2970526882171626\n","RMSE: 0.545025401442137\n","MAE: 0.4820057585734864\n","RMSLE: 0.7918419188885952\n","Mean Residual Deviance: 0.2970526882171626</pre></div>\n","<div style='margin: 1em 0 1em 0;'>\n","<style>\n","\n","#h2o-table-7.h2o-container {\n","  overflow-x: auto;\n","}\n","#h2o-table-7 .h2o-table {\n","  /* width: 100%; */\n","  margin-top: 1em;\n","  margin-bottom: 1em;\n","}\n","#h2o-table-7 .h2o-table caption {\n","  white-space: nowrap;\n","  caption-side: top;\n","  text-align: left;\n","  /* margin-left: 1em; */\n","  margin: 0;\n","  font-size: larger;\n","}\n","#h2o-table-7 .h2o-table thead {\n","  white-space: nowrap; \n","  position: sticky;\n","  top: 0;\n","  box-shadow: 0 -1px inset;\n","}\n","#h2o-table-7 .h2o-table tbody {\n","  overflow: auto;\n","}\n","#h2o-table-7 .h2o-table th,\n","#h2o-table-7 .h2o-table td {\n","  text-align: right;\n","  /* border: 1px solid; */\n","}\n","#h2o-table-7 .h2o-table tr:nth-child(even) {\n","  /* background: #F5F5F5 */\n","}\n","\n","</style>      \n","<div id=\"h2o-table-7\" class=\"h2o-container\">\n","  <table class=\"h2o-table\">\n","    <caption>Cross-Validation Metrics Summary: </caption>\n","    <thead><tr><th></th>\n","<th>mean</th>\n","<th>sd</th>\n","<th>cv_1_valid</th>\n","<th>cv_2_valid</th>\n","<th>cv_3_valid</th>\n","<th>cv_4_valid</th>\n","<th>cv_5_valid</th></tr></thead>\n","    <tbody><tr><td>aic</td>\n","<td>nan</td>\n","<td>0.0</td>\n","<td>nan</td>\n","<td>nan</td>\n","<td>nan</td>\n","<td>nan</td>\n","<td>nan</td></tr>\n","<tr><td>loglikelihood</td>\n","<td>nan</td>\n","<td>0.0</td>\n","<td>nan</td>\n","<td>nan</td>\n","<td>nan</td>\n","<td>nan</td>\n","<td>nan</td></tr>\n","<tr><td>mae</td>\n","<td>0.4912146</td>\n","<td>0.1124581</td>\n","<td>0.5496531</td>\n","<td>0.2992381</td>\n","<td>0.4831945</td>\n","<td>0.5728013</td>\n","<td>0.5511859</td></tr>\n","<tr><td>mean_residual_deviance</td>\n","<td>0.3084789</td>\n","<td>0.1139715</td>\n","<td>0.3714001</td>\n","<td>0.1222453</td>\n","<td>0.2756295</td>\n","<td>0.3818915</td>\n","<td>0.3912284</td></tr>\n","<tr><td>mse</td>\n","<td>0.3084789</td>\n","<td>0.1139715</td>\n","<td>0.3714001</td>\n","<td>0.1222453</td>\n","<td>0.2756295</td>\n","<td>0.3818915</td>\n","<td>0.3912284</td></tr>\n","<tr><td>r2</td>\n","<td>-2.1360574</td>\n","<td>2.765857</td>\n","<td>-1.7624096</td>\n","<td>0.1788291</td>\n","<td>-1.5352119</td>\n","<td>-0.6718473</td>\n","<td>-6.8896475</td></tr>\n","<tr><td>residual_deviance</td>\n","<td>0.3084789</td>\n","<td>0.1139715</td>\n","<td>0.3714001</td>\n","<td>0.1222453</td>\n","<td>0.2756295</td>\n","<td>0.3818915</td>\n","<td>0.3912284</td></tr>\n","<tr><td>rmse</td>\n","<td>0.5455045</td>\n","<td>0.1167465</td>\n","<td>0.609426</td>\n","<td>0.3496359</td>\n","<td>0.5250043</td>\n","<td>0.6179737</td>\n","<td>0.6254825</td></tr>\n","<tr><td>rmsle</td>\n","<td>0.8192221</td>\n","<td>0.4484842</td>\n","<td>0.7700462</td>\n","<td>0.4944300</td>\n","<td>0.5707113</td>\n","<td>0.6608093</td>\n","<td>1.6001139</td></tr></tbody>\n","  </table>\n","</div>\n","</div>\n","<div style='margin: 1em 0 1em 0;'>\n","<style>\n","\n","#h2o-table-8.h2o-container {\n","  overflow-x: auto;\n","}\n","#h2o-table-8 .h2o-table {\n","  /* width: 100%; */\n","  margin-top: 1em;\n","  margin-bottom: 1em;\n","}\n","#h2o-table-8 .h2o-table caption {\n","  white-space: nowrap;\n","  caption-side: top;\n","  text-align: left;\n","  /* margin-left: 1em; */\n","  margin: 0;\n","  font-size: larger;\n","}\n","#h2o-table-8 .h2o-table thead {\n","  white-space: nowrap; \n","  position: sticky;\n","  top: 0;\n","  box-shadow: 0 -1px inset;\n","}\n","#h2o-table-8 .h2o-table tbody {\n","  overflow: auto;\n","}\n","#h2o-table-8 .h2o-table th,\n","#h2o-table-8 .h2o-table td {\n","  text-align: right;\n","  /* border: 1px solid; */\n","}\n","#h2o-table-8 .h2o-table tr:nth-child(even) {\n","  /* background: #F5F5F5 */\n","}\n","\n","</style>      \n","<div id=\"h2o-table-8\" class=\"h2o-container\">\n","  <table class=\"h2o-table\">\n","    <caption>Scoring History: </caption>\n","    <thead><tr><th></th>\n","<th>timestamp</th>\n","<th>duration</th>\n","<th>number_of_trees</th>\n","<th>training_rmse</th>\n","<th>training_mae</th>\n","<th>training_deviance</th></tr></thead>\n","    <tbody><tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.561 sec</td>\n","<td>0.0</td>\n","<td>0.3720918</td>\n","<td>0.2847243</td>\n","<td>0.1384523</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.566 sec</td>\n","<td>1.0</td>\n","<td>0.1860459</td>\n","<td>0.1423622</td>\n","<td>0.0346131</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.569 sec</td>\n","<td>2.0</td>\n","<td>0.0930230</td>\n","<td>0.0711811</td>\n","<td>0.0086533</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.572 sec</td>\n","<td>3.0</td>\n","<td>0.0465115</td>\n","<td>0.0355905</td>\n","<td>0.0021633</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.575 sec</td>\n","<td>4.0</td>\n","<td>0.0232557</td>\n","<td>0.0177953</td>\n","<td>0.0005408</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.578 sec</td>\n","<td>5.0</td>\n","<td>0.0116279</td>\n","<td>0.0088976</td>\n","<td>0.0001352</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.581 sec</td>\n","<td>6.0</td>\n","<td>0.0058139</td>\n","<td>0.0044488</td>\n","<td>0.0000338</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.585 sec</td>\n","<td>7.0</td>\n","<td>0.0029070</td>\n","<td>0.0022244</td>\n","<td>0.0000085</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.587 sec</td>\n","<td>8.0</td>\n","<td>0.0014535</td>\n","<td>0.0011122</td>\n","<td>0.0000021</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.590 sec</td>\n","<td>9.0</td>\n","<td>0.0007267</td>\n","<td>0.0005561</td>\n","<td>0.0000005</td></tr>\n","<tr><td>---</td>\n","<td>---</td>\n","<td>---</td>\n","<td>---</td>\n","<td>---</td>\n","<td>---</td>\n","<td>---</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.702 sec</td>\n","<td>41.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.705 sec</td>\n","<td>42.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.708 sec</td>\n","<td>43.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.713 sec</td>\n","<td>44.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.717 sec</td>\n","<td>45.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.722 sec</td>\n","<td>46.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.727 sec</td>\n","<td>47.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.730 sec</td>\n","<td>48.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.733 sec</td>\n","<td>49.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr>\n","<tr><td></td>\n","<td>2024-12-10 07:18:16</td>\n","<td> 0.736 sec</td>\n","<td>50.0</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td>\n","<td>0.0000000</td></tr></tbody>\n","  </table>\n","</div>\n","<pre style='font-size: smaller; margin-bottom: 1em;'>[51 rows x 7 columns]</pre></div>\n","<div style='margin: 1em 0 1em 0;'>\n","<style>\n","\n","#h2o-table-9.h2o-container {\n","  overflow-x: auto;\n","}\n","#h2o-table-9 .h2o-table {\n","  /* width: 100%; */\n","  margin-top: 1em;\n","  margin-bottom: 1em;\n","}\n","#h2o-table-9 .h2o-table caption {\n","  white-space: nowrap;\n","  caption-side: top;\n","  text-align: left;\n","  /* margin-left: 1em; */\n","  margin: 0;\n","  font-size: larger;\n","}\n","#h2o-table-9 .h2o-table thead {\n","  white-space: nowrap; \n","  position: sticky;\n","  top: 0;\n","  box-shadow: 0 -1px inset;\n","}\n","#h2o-table-9 .h2o-table tbody {\n","  overflow: auto;\n","}\n","#h2o-table-9 .h2o-table th,\n","#h2o-table-9 .h2o-table td {\n","  text-align: right;\n","  /* border: 1px solid; */\n","}\n","#h2o-table-9 .h2o-table tr:nth-child(even) {\n","  /* background: #F5F5F5 */\n","}\n","\n","</style>      \n","<div id=\"h2o-table-9\" class=\"h2o-container\">\n","  <table class=\"h2o-table\">\n","    <caption>Variable Importances: </caption>\n","    <thead><tr><th>variable</th>\n","<th>relative_importance</th>\n","<th>scaled_importance</th>\n","<th>percentage</th></tr></thead>\n","    <tbody><tr><td>Month</td>\n","<td>2.4888310</td>\n","<td>1.0</td>\n","<td>0.2696414</td></tr>\n","<tr><td>Year</td>\n","<td>2.2106009</td>\n","<td>0.8882085</td>\n","<td>0.2394978</td></tr>\n","<tr><td>Day_of_Week</td>\n","<td>1.8539774</td>\n","<td>0.7449190</td>\n","<td>0.2008610</td></tr>\n","<tr><td>Day_of_Year</td>\n","<td>1.5556718</td>\n","<td>0.6250612</td>\n","<td>0.1685424</td></tr>\n","<tr><td>Week_of_Year</td>\n","<td>1.0693172</td>\n","<td>0.4296464</td>\n","<td>0.1158505</td></tr>\n","<tr><td>Quarter</td>\n","<td>0.0517531</td>\n","<td>0.0207942</td>\n","<td>0.0056070</td></tr></tbody>\n","  </table>\n","</div>\n","</div><pre style=\"font-size: smaller; margin: 1em 0 0 0;\">\n","\n","[tips]\n","Use `model.explain()` to inspect the model.\n","--\n","Use `h2o.display.toggle_user_tips()` to switch on/off this section.</pre>"],"text/plain":["Model Details\n","=============\n","H2OGradientBoostingEstimator : Gradient Boosting Machine\n","Model Key: GBM_model_python_1733815004309_2\n","\n","\n","Model Summary: \n","    number_of_trees    number_of_internal_trees    model_size_in_bytes    min_depth    max_depth    mean_depth    min_leaves    max_leaves    mean_leaves\n","--  -----------------  --------------------------  ---------------------  -----------  -----------  ------------  ------------  ------------  -------------\n","    50                 50                          34290                  10           13           11.46         50            50            50\n","\n","ModelMetricsRegression: gbm\n","** Reported on train data. **\n","\n","MSE: 4.222490412875146e-16\n","RMSE: 2.054869926023335e-08\n","MAE: 1.0263174772262573e-08\n","RMSLE: 6.41000473957424e-08\n","Mean Residual Deviance: 4.222490412875146e-16\n","\n","ModelMetricsRegression: gbm\n","** Reported on cross-validation data. **\n","\n","MSE: 0.2970526882171626\n","RMSE: 0.545025401442137\n","MAE: 0.4820057585734864\n","RMSLE: 0.7918419188885952\n","Mean Residual Deviance: 0.2970526882171626\n","\n","Cross-Validation Metrics Summary: \n","                        mean      sd        cv_1_valid    cv_2_valid    cv_3_valid    cv_4_valid    cv_5_valid\n","----------------------  --------  --------  ------------  ------------  ------------  ------------  ------------\n","aic                     nan       0         nan           nan           nan           nan           nan\n","loglikelihood           nan       0         nan           nan           nan           nan           nan\n","mae                     0.491215  0.112458  0.549653      0.299238      0.483194      0.572801      0.551186\n","mean_residual_deviance  0.308479  0.113971  0.3714        0.122245      0.275629      0.381891      0.391228\n","mse                     0.308479  0.113971  0.3714        0.122245      0.275629      0.381891      0.391228\n","r2                      -2.13606  2.76586   -1.76241      0.178829      -1.53521      -0.671847     -6.88965\n","residual_deviance       0.308479  0.113971  0.3714        0.122245      0.275629      0.381891      0.391228\n","rmse                    0.545504  0.116747  0.609426      0.349636      0.525004      0.617974      0.625483\n","rmsle                   0.819222  0.448484  0.770046      0.49443       0.570711      0.660809      1.60011\n","\n","Scoring History: \n","     timestamp            duration    number_of_trees    training_rmse          training_mae            training_deviance\n","---  -------------------  ----------  -----------------  ---------------------  ----------------------  ----------------------\n","     2024-12-10 07:18:16  0.561 sec   0.0                0.37209180207638765    0.28472432459522795     0.13845230917245363\n","     2024-12-10 07:18:16  0.566 sec   1.0                0.18604589920588135    0.14236216149816755     0.03461307661132496\n","     2024-12-10 07:18:16  0.569 sec   2.0                0.09302295121999353    0.07118108104914427     0.008653269453677295\n","     2024-12-10 07:18:16  0.572 sec   3.0                0.04651147556553386    0.03559053922072053     0.0021633173592832534\n","     2024-12-10 07:18:16  0.575 sec   4.0                0.023255737634553478   0.017795268986374138    0.0005408293329271871\n","     2024-12-10 07:18:16  0.578 sec   5.0                0.011627868028370706   0.008897633459419012    0.00013520731488520567\n","     2024-12-10 07:18:16  0.581 sec   6.0                0.005813932946693033   0.004448816180229187    3.3801816308642735e-05\n","     2024-12-10 07:18:16  0.585 sec   7.0                0.002906962296205353   0.002224405761808157    8.450429791559498e-06\n","     2024-12-10 07:18:16  0.587 sec   8.0                0.0014534807291302753  0.0011122013814747333   2.1126062299530768e-06\n","     2024-12-10 07:18:16  0.590 sec   9.0                0.000726741081243499   0.0005561001598834991   5.2815259916697e-07\n","---  ---                  ---         ---                ---                    ---                     ---\n","     2024-12-10 07:18:16  0.702 sec   41.0               2.054869926023335e-08  1.0263174772262573e-08  4.222490412875146e-16\n","     2024-12-10 07:18:16  0.705 sec   42.0               2.054869926023335e-08  1.0263174772262573e-08  4.222490412875146e-16\n","     2024-12-10 07:18:16  0.708 sec   43.0               2.054869926023335e-08  1.0263174772262573e-08  4.222490412875146e-16\n","     2024-12-10 07:18:16  0.713 sec   44.0               2.054869926023335e-08  1.0263174772262573e-08  4.222490412875146e-16\n","     2024-12-10 07:18:16  0.717 sec   45.0               2.054869926023335e-08  1.0263174772262573e-08  4.222490412875146e-16\n","     2024-12-10 07:18:16  0.722 sec   46.0               2.054869926023335e-08  1.0263174772262573e-08  4.222490412875146e-16\n","     2024-12-10 07:18:16  0.727 sec   47.0               2.054869926023335e-08  1.0263174772262573e-08  4.222490412875146e-16\n","     2024-12-10 07:18:16  0.730 sec   48.0               2.054869926023335e-08  1.0263174772262573e-08  4.222490412875146e-16\n","     2024-12-10 07:18:16  0.733 sec   49.0               2.054869926023335e-08  1.0263174772262573e-08  4.222490412875146e-16\n","     2024-12-10 07:18:16  0.736 sec   50.0               2.054869926023335e-08  1.0263174772262573e-08  4.222490412875146e-16\n","[51 rows x 7 columns]\n","\n","\n","Variable Importances: \n","variable      relative_importance    scaled_importance    percentage\n","------------  ---------------------  -------------------  ------------\n","Month         2.48883                1                    0.269641\n","Year          2.2106                 0.888208             0.239498\n","Day_of_Week   1.85398                0.744919             0.200861\n","Day_of_Year   1.55567                0.625061             0.168542\n","Week_of_Year  1.06932                0.429646             0.11585\n","Quarter       0.0517531              0.0207942            0.00560696\n","\n","[tips]\n","Use `model.explain()` to inspect the model.\n","--\n","Use `h2o.display.toggle_user_tips()` to switch on/off this section."]},"execution_count":22,"metadata":{},"output_type":"execute_result"}],"source":["# Initialize and train the H2O Random Forest model\n","rf_model = H2OGradientBoostingEstimator(nfolds=5, learn_rate=0.5, max_depth=20, min_rows=1,ntrees=50, seed=0)\n","rf_model.train(x=predictors, y=response, training_frame=h2o_data)"]},{"cell_type":"code","execution_count":23,"id":"0c4612bb","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:16.898286Z","iopub.status.busy":"2024-12-10T07:18:16.897339Z","iopub.status.idle":"2024-12-10T07:18:17.009078Z","shell.execute_reply":"2024-12-10T07:18:17.008044Z"},"papermill":{"duration":0.130861,"end_time":"2024-12-10T07:18:17.01156","exception":false,"start_time":"2024-12-10T07:18:16.880699","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["gbm prediction progress: |███████████████████████████████████████████████████████| (done) 100%\n"]},{"name":"stderr","output_type":"stream","text":["/opt/conda/lib/python3.10/site-packages/h2o/frame.py:1981: H2ODependencyWarning: Converting H2O frame to pandas dataframe using single-thread.  For faster conversion using multi-thread, install polars and pyarrow and use it as pandas_df = h2o_df.as_data_frame(use_multi_thread=True)\n","\n","  warnings.warn(\"Converting H2O frame to pandas dataframe using single-thread.  For faster conversion using\"\n"]}],"source":["# Make predictions for the entire dataset\n","h2o_data['Predictions'] = rf_model.predict(h2o_data)['predict']\n","predictions_df = h2o_data.as_data_frame()"]},{"cell_type":"code","execution_count":24,"id":"7d9102c0","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:17.04443Z","iopub.status.busy":"2024-12-10T07:18:17.044042Z","iopub.status.idle":"2024-12-10T07:18:17.048955Z","shell.execute_reply":"2024-12-10T07:18:17.047788Z"},"papermill":{"duration":0.023773,"end_time":"2024-12-10T07:18:17.051115","exception":false,"start_time":"2024-12-10T07:18:17.027342","status":"completed"},"tags":[]},"outputs":[],"source":["# Extract the predictions column from the DataFrame\n","predictions_column = predictions_df['Predictions'].values"]},{"cell_type":"code","execution_count":25,"id":"2a2d4651","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:17.083172Z","iopub.status.busy":"2024-12-10T07:18:17.082777Z","iopub.status.idle":"2024-12-10T07:18:17.0874Z","shell.execute_reply":"2024-12-10T07:18:17.086338Z"},"papermill":{"duration":0.023257,"end_time":"2024-12-10T07:18:17.089502","exception":false,"start_time":"2024-12-10T07:18:17.066245","status":"completed"},"tags":[]},"outputs":[],"source":["# Compute the cumulative sum of the predictions\n","y_pred_cumsum = np.cumsum(predictions_column)"]},{"cell_type":"code","execution_count":26,"id":"f1a84771","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:17.122712Z","iopub.status.busy":"2024-12-10T07:18:17.122269Z","iopub.status.idle":"2024-12-10T07:18:17.127501Z","shell.execute_reply":"2024-12-10T07:18:17.126528Z"},"papermill":{"duration":0.024556,"end_time":"2024-12-10T07:18:17.129719","exception":false,"start_time":"2024-12-10T07:18:17.105163","status":"completed"},"tags":[]},"outputs":[],"source":["# Compute the original scale of predictions\n","log_total_sales_last = monthly_sales['Log_TotalSales'].iloc[-1]\n","y_pred_original = np.expm1(y_pred_cumsum + log_total_sales_last - y_pred_cumsum[0])"]},{"cell_type":"code","execution_count":27,"id":"a999fe70","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:17.162237Z","iopub.status.busy":"2024-12-10T07:18:17.161849Z","iopub.status.idle":"2024-12-10T07:18:17.417919Z","shell.execute_reply":"2024-12-10T07:18:17.414946Z"},"papermill":{"duration":0.27501,"end_time":"2024-12-10T07:18:17.420086","exception":false,"start_time":"2024-12-10T07:18:17.145076","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Parse progress: |"]},{"name":"stderr","output_type":"stream","text":["/tmp/ipykernel_17/3920330376.py:3: FutureWarning: 'M' is deprecated and will be removed in a future version, please use 'ME' instead.\n","  future_dates = pd.date_range(start=last_date + pd.DateOffset(months=1), periods=60, freq='M')\n"]},{"name":"stdout","output_type":"stream","text":["████████████████████████████████████████████████████████████████| (done) 100%\n"]}],"source":["# Create a future DataFrame for 60 months\n","last_date = monthly_sales['Date'].max()\n","future_dates = pd.date_range(start=last_date + pd.DateOffset(months=1), periods=60, freq='M')\n","future_df = pd.DataFrame({\n","    'Date': future_dates,\n","    'Month': future_dates.month,\n","    'Year': future_dates.year,\n","    'Day_of_Week': future_dates.dayofweek,\n","    'Week_of_Year': future_dates.isocalendar().week,\n","    'Day_of_Year': future_dates.day_of_year,\n","    'Quarter': future_dates.quarter\n","})\n","\n","# Convert future DataFrame to H2OFrame\n","h2o_future = H2OFrame(future_df)"]},{"cell_type":"code","execution_count":28,"id":"e43c03f9","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:17.453802Z","iopub.status.busy":"2024-12-10T07:18:17.452912Z","iopub.status.idle":"2024-12-10T07:18:17.69314Z","shell.execute_reply":"2024-12-10T07:18:17.690936Z"},"papermill":{"duration":0.260341,"end_time":"2024-12-10T07:18:17.696","exception":false,"start_time":"2024-12-10T07:18:17.435659","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["gbm prediction progress: |███████████████████████████████████████████████████████| (done) 100%\n"]},{"name":"stderr","output_type":"stream","text":["/opt/conda/lib/python3.10/site-packages/h2o/frame.py:1981: H2ODependencyWarning: Converting H2O frame to pandas dataframe using single-thread.  For faster conversion using multi-thread, install polars and pyarrow and use it as pandas_df = h2o_df.as_data_frame(use_multi_thread=True)\n","\n","  warnings.warn(\"Converting H2O frame to pandas dataframe using single-thread.  For faster conversion using\"\n"]}],"source":["# Predict future values\n","future_predictions = rf_model.predict(h2o_future)\n","future_predictions_df = future_predictions.as_data_frame()"]},{"cell_type":"code","execution_count":29,"id":"1fc00bd3","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:17.728425Z","iopub.status.busy":"2024-12-10T07:18:17.728042Z","iopub.status.idle":"2024-12-10T07:18:17.732931Z","shell.execute_reply":"2024-12-10T07:18:17.731853Z"},"papermill":{"duration":0.023624,"end_time":"2024-12-10T07:18:17.735046","exception":false,"start_time":"2024-12-10T07:18:17.711422","status":"completed"},"tags":[]},"outputs":[],"source":["# Extract the predictions column from the DataFrame\n","future_predictions_column = future_predictions_df['predict'].values"]},{"cell_type":"code","execution_count":30,"id":"b2f4aaaa","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:17.77054Z","iopub.status.busy":"2024-12-10T07:18:17.769375Z","iopub.status.idle":"2024-12-10T07:18:17.774492Z","shell.execute_reply":"2024-12-10T07:18:17.773488Z"},"papermill":{"duration":0.025524,"end_time":"2024-12-10T07:18:17.77647","exception":false,"start_time":"2024-12-10T07:18:17.750946","status":"completed"},"tags":[]},"outputs":[],"source":["# Compute the cumulative sum of the future predictions\n","y_future_pred_cumsum = np.cumsum(future_predictions_column)"]},{"cell_type":"code","execution_count":31,"id":"377d0187","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:17.808571Z","iopub.status.busy":"2024-12-10T07:18:17.808178Z","iopub.status.idle":"2024-12-10T07:18:17.813771Z","shell.execute_reply":"2024-12-10T07:18:17.812571Z"},"papermill":{"duration":0.024097,"end_time":"2024-12-10T07:18:17.815746","exception":false,"start_time":"2024-12-10T07:18:17.791649","status":"completed"},"tags":[]},"outputs":[],"source":["# Compute the original scale of future predictions\n","log_total_sales_last = monthly_sales['Log_TotalSales'].iloc[-1]\n","y_future_pred_original = np.expm1(y_future_pred_cumsum + log_total_sales_last - y_future_pred_cumsum[0])"]},{"cell_type":"code","execution_count":32,"id":"5f418a30","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:17.848229Z","iopub.status.busy":"2024-12-10T07:18:17.847861Z","iopub.status.idle":"2024-12-10T07:18:18.243969Z","shell.execute_reply":"2024-12-10T07:18:18.242943Z"},"papermill":{"duration":0.415294,"end_time":"2024-12-10T07:18:18.246341","exception":false,"start_time":"2024-12-10T07:18:17.831047","status":"completed"},"tags":[]},"outputs":[{"data":{"image/png":"","text/plain":["<Figure size 1400x700 with 1 Axes>"]},"metadata":{},"output_type":"display_data"}],"source":["# Plot the results\n","plt.figure(figsize=(14, 7))\n","plt.plot(monthly_sales['Date'], monthly_sales['TotalSales'], label='Actual Sales', marker='o')\n","plt.plot(future_df['Date'], y_future_pred_original, label='Next 60 Months Predictions', marker='o', color='red')\n","plt.xlabel('Date')\n","plt.ylabel('Total Sales')\n","plt.title('H2O Gradient Boosting Predictions - Monthly')\n","plt.legend()\n","plt.show()"]},{"cell_type":"code","execution_count":33,"id":"815368d1","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:18.282971Z","iopub.status.busy":"2024-12-10T07:18:18.282055Z","iopub.status.idle":"2024-12-10T07:18:18.288112Z","shell.execute_reply":"2024-12-10T07:18:18.287092Z"},"papermill":{"duration":0.02728,"end_time":"2024-12-10T07:18:18.290178","exception":false,"start_time":"2024-12-10T07:18:18.262898","status":"completed"},"tags":[]},"outputs":[],"source":["predictions_series = pd.Series(y_future_pred_original, name='TotalSales')\n","future_df['TotalSales'] = predictions_series.values"]},{"cell_type":"code","execution_count":34,"id":"8f21d731","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:18.323803Z","iopub.status.busy":"2024-12-10T07:18:18.323375Z","iopub.status.idle":"2024-12-10T07:18:18.33192Z","shell.execute_reply":"2024-12-10T07:18:18.331093Z"},"papermill":{"duration":0.027731,"end_time":"2024-12-10T07:18:18.333896","exception":false,"start_time":"2024-12-10T07:18:18.306165","status":"completed"},"tags":[]},"outputs":[],"source":["combined_df = pd.concat([monthly_sales, future_df])\n","combined_df.set_index('Date', inplace=True)"]},{"cell_type":"code","execution_count":35,"id":"c38a4e7e","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:18.367436Z","iopub.status.busy":"2024-12-10T07:18:18.36707Z","iopub.status.idle":"2024-12-10T07:18:18.374919Z","shell.execute_reply":"2024-12-10T07:18:18.373932Z"},"papermill":{"duration":0.027509,"end_time":"2024-12-10T07:18:18.377361","exception":false,"start_time":"2024-12-10T07:18:18.349852","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["/tmp/ipykernel_17/3314874557.py:1: FutureWarning: 'A' is deprecated and will be removed in a future version, please use 'YE' instead.\n","  annual_sales = combined_df['TotalSales'].resample('A').sum()\n"]}],"source":["annual_sales = combined_df['TotalSales'].resample('A').sum()"]},{"cell_type":"markdown","id":"9a3b3240","metadata":{"papermill":{"duration":0.015687,"end_time":"2024-12-10T07:18:18.408853","exception":false,"start_time":"2024-12-10T07:18:18.393166","status":"completed"},"tags":[]},"source":["The decision was made to take a certain percentage of the company's sales revenue in order to consider it as cash flow, since a valuation based solely on sales revenue would be meaningless. To determine this percentage, financial statements obtained from the Public Disclosure Platform (KAP) for companies such as Aselsan, Derimod, and Jantsa were analyzed. Similar to the Retail Dataset, sales revenues were used as a basis, and free cash flows for each quarter were calculated by utilizing other financial items. When comparing sales revenues and free cash flows for each year, it was found that for Aselsan, an average of 19% of the year-end sales revenues from 2016-2023 corresponded to year-end free cash flows. This percentage was found to be 12% for Derimod and 15% for Jantsa. For the Retail Dataset, it was deemed appropriate to take the average of these three values, and 15% of the estimated sales revenues was considered as free cash flow. When calculating the company's value, a discount rate of 60% was set, and this rate was kept dynamic."]},{"cell_type":"code","execution_count":36,"id":"cb742dd2","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:18.442285Z","iopub.status.busy":"2024-12-10T07:18:18.441604Z","iopub.status.idle":"2024-12-10T07:18:18.454113Z","shell.execute_reply":"2024-12-10T07:18:18.45311Z"},"papermill":{"duration":0.03134,"end_time":"2024-12-10T07:18:18.456032","exception":false,"start_time":"2024-12-10T07:18:18.424692","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["/tmp/ipykernel_17/2499792570.py:9: FutureWarning: 'A' is deprecated and will be removed in a future version, please use 'YE' instead.\n","  annual_sales = filtered_df['TotalSales'].resample('A').sum()\n"]}],"source":["# Range of specified years\n","start_year = 2023\n","end_year = 2027\n","\n","# Filter the data frame by specific years\n","filtered_df = combined_df.loc[combined_df.index.year.isin(range(start_year, end_year + 1))]\n","\n","# Calculating total annual sales\n","annual_sales = filtered_df['TotalSales'].resample('A').sum()\n","annual_sales = pd.DataFrame(annual_sales)\n","annual_sales['TotalSales'] = annual_sales['TotalSales'] * 0.15\n","discount_rate = 0.6"]},{"cell_type":"code","execution_count":37,"id":"992082b3","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:18.491388Z","iopub.status.busy":"2024-12-10T07:18:18.490655Z","iopub.status.idle":"2024-12-10T07:18:18.49881Z","shell.execute_reply":"2024-12-10T07:18:18.497733Z"},"papermill":{"duration":0.027778,"end_time":"2024-12-10T07:18:18.500753","exception":false,"start_time":"2024-12-10T07:18:18.472975","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Value of the Company after 5 Years: 140982934.47\n"]}],"source":["def calculate_company_value(forecast_values, discount_rate, terminal_growth_rate=0.05):\n","    # Summing future cash flows in annual totals\n","    future_cash_flows = forecast_values\n","    \n","    # Calculating discounted cash flows\n","    discounted_cash_flows = [cf / (1 + discount_rate)**i for i, cf in enumerate(future_cash_flows, 1)]\n","    \n","    # Terminal value calculation\n","    terminal_value = future_cash_flows[-1] * (1 + terminal_growth_rate) / (discount_rate - terminal_growth_rate)\n","    \n","    # Reducing the terminal value\n","    terminal_value_discounted = terminal_value / (1 + discount_rate)**len(future_cash_flows)\n","    \n","    # Calculating company value\n","    company_value = sum(discounted_cash_flows) + terminal_value_discounted\n","        \n","    return company_value\n","\n","# Calculating company value for 5-year forecasts\n","company_value_5years = calculate_company_value(annual_sales['TotalSales'].values, discount_rate)\n","\n","print(f'Value of the Company after 5 Years: {company_value_5years:.2f}')"]},{"cell_type":"code","execution_count":38,"id":"859f647f","metadata":{"execution":{"iopub.execute_input":"2024-12-10T07:18:18.535507Z","iopub.status.busy":"2024-12-10T07:18:18.534699Z","iopub.status.idle":"2024-12-10T07:18:18.558605Z","shell.execute_reply":"2024-12-10T07:18:18.557228Z"},"papermill":{"duration":0.043674,"end_time":"2024-12-10T07:18:18.560789","exception":false,"start_time":"2024-12-10T07:18:18.517115","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["H2O session _sid_8821 closed.\n"]},{"name":"stderr","output_type":"stream","text":["/tmp/ipykernel_17/1954269801.py:1: H2ODeprecationWarning: Deprecated, use ``h2o.cluster().shutdown()``.\n","  h2o.shutdown(prompt=False)\n"]}],"source":["h2o.shutdown(prompt=False)"]},{"cell_type":"markdown","id":"9cd63bb4","metadata":{"papermill":{"duration":0.016468,"end_time":"2024-12-10T07:18:18.593911","exception":false,"start_time":"2024-12-10T07:18:18.577443","status":"completed"},"tags":[]},"source":["You can access the article I wrote about this project and the relevant issue via the links below. Enjoy reading!\n","\n","**Issue**: https://ybsansiklopedi.com/cilt-12-sayi-2-haziran-2024/\n","\n","**Article**: https://ybsansiklopedi.com/wp-content/uploads/2024/08/Company-Valuation.pdf"]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"datasetId":3067824,"sourceId":5271987,"sourceType":"datasetVersion"}],"dockerImageVersionId":30761,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.10.14"},"papermill":{"default_parameters":{},"duration":101.309072,"end_time":"2024-12-10T07:18:20.133787","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2024-12-10T07:16:38.824715","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}